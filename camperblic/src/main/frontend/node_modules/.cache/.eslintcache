[{"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/index.tsx":"1","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/reportWebVitals.ts":"2","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/App.tsx":"3","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/Main.tsx":"4","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/components/Header.tsx":"5","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/item/Mat.tsx":"6","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/item/Tent.tsx":"7","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/item/Chair.tsx":"8","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/item/Etc.tsx":"9","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/components/Footer.tsx":"10","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/item/Cook.tsx":"11","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/item/ItemAll.tsx":"12","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/item/ItemDetail.tsx":"13","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/login/MyPage.tsx":"14","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/login/OrderList.tsx":"15","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/login/FindAccount.tsx":"16","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/login/Login.tsx":"17","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/login/FindPassword.tsx":"18","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/payment/Order.tsx":"19","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/payment/OrderDetail.tsx":"20","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/AdminBoard.tsx":"21","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/payment/Cart.tsx":"22","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/AdminStock.tsx":"23","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/AdminMember.tsx":"24","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/AdminDashboard.tsx":"25","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/community/BoardDetail.tsx":"26","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/community/FreeBoard.tsx":"27","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/community/CampStroy.tsx":"28","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/community/CommunityDashboard.tsx":"29","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/community/GatherCamperBoard.tsx":"30","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/item/ItemLayOut.tsx":"31","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/components/Admin.tsx":"32","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/payment/TitleLayout.tsx":"33","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/payment/ItemlistCart.tsx":"34","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/payment/ChargeBox.tsx":"35","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/community/BoardLayOut.tsx":"36","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/login/SignUp.tsx":"37","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/community/BoardWrite.tsx":"38","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/community/ReviewCamping.tsx":"39","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/community/component/ReplyInputContainer.tsx":"40","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/community/component/EditDeleteButtons.tsx":"41","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/community/component/CommentItem.tsx":"42","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/item/components/AddProductModal.tsx":"43","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/AdminMemberLayout.tsx":"44","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/adminboard/AdminBoardCampStory.tsx":"45","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/adminboard/AdminBoardFreeboard.tsx":"46","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/adminboard/AdminBoardReview.tsx":"47","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/adminboard/AdminBoardGatherCamper.tsx":"48","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardGraph.tsx":"49","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardSecond.tsx":"50","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardOrder.tsx":"51","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardBottom.tsx":"52","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/adminstock/AdminStockCook.tsx":"53","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/adminstock/AdminStockTent.tsx":"54","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/adminstock/AdminStockMat.tsx":"55","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/adminstock/AdminStockEtc.tsx":"56","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/adminstock/AdminStockChair.tsx":"57","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/AdminMemberDetail.tsx":"58","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/Barchart.tsx":"59","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/adminboard/AdminBoardLayout.tsx":"60","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardBoard.tsx":"61","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardSecondTime.tsx":"62","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardStock.tsx":"63","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/adminstock/AdminStockLayout.tsx":"64","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/adminorder/AdminOrderPaymentFinish.tsx":"65","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/adminorder/AdminOrderAllFinish.tsx":"66","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/adminorder/AdminOrderDelivery.tsx":"67","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardBoardFreeboard.tsx":"68","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardBoardReview.tsx":"69","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardBoardGatherCamper.tsx":"70","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardBoardCampStory.tsx":"71","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardStockCook.tsx":"72","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardStockChair.tsx":"73","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardStockEtc.tsx":"74","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardStockMat.tsx":"75","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardStockTent.tsx":"76","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/adminstock/AdminStockUpdate.tsx":"77","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/adminorder/AdminOrderLayout.tsx":"78","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardStockLayout.tsx":"79","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardBoardLayout.tsx":"80","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/login/RenderUserInformation.tsx":"81","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/login/MyPageInputAdd.tsx":"82","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/payment/ItemlistOrder.tsx":"83"},{"size":554,"mtime":1684997555000,"results":"84","hashOfConfig":"85"},{"size":425,"mtime":1684997555000,"results":"86","hashOfConfig":"85"},{"size":6617,"mtime":1688056505705,"results":"87","hashOfConfig":"85"},{"size":2487,"mtime":1688017107537,"results":"88","hashOfConfig":"85"},{"size":4137,"mtime":1688090619521,"results":"89","hashOfConfig":"85"},{"size":836,"mtime":1688049768913,"results":"90","hashOfConfig":"85"},{"size":837,"mtime":1688049823011,"results":"91","hashOfConfig":"85"},{"size":841,"mtime":1688050121296,"results":"92","hashOfConfig":"85"},{"size":829,"mtime":1688049768924,"results":"93","hashOfConfig":"85"},{"size":1791,"mtime":1688018967647,"results":"94","hashOfConfig":"85"},{"size":835,"mtime":1688049768916,"results":"95","hashOfConfig":"85"},{"size":1775,"mtime":1688049909560,"results":"96","hashOfConfig":"85"},{"size":3905,"mtime":1688016743375,"results":"97","hashOfConfig":"85"},{"size":2536,"mtime":1688010140000,"results":"98","hashOfConfig":"85"},{"size":1723,"mtime":1687935640000,"results":"99","hashOfConfig":"85"},{"size":5200,"mtime":1687953186000,"results":"100","hashOfConfig":"85"},{"size":4016,"mtime":1688010260000,"results":"101","hashOfConfig":"85"},{"size":3817,"mtime":1687936212000,"results":"102","hashOfConfig":"85"},{"size":2160,"mtime":1688061191915,"results":"103","hashOfConfig":"85"},{"size":157,"mtime":1686823968000,"results":"104","hashOfConfig":"85"},{"size":2819,"mtime":1687761818000,"results":"105","hashOfConfig":"85"},{"size":2266,"mtime":1688061103084,"results":"106","hashOfConfig":"85"},{"size":3157,"mtime":1687588046000,"results":"107","hashOfConfig":"85"},{"size":702,"mtime":1687761674000,"results":"108","hashOfConfig":"85"},{"size":2316,"mtime":1687761748000,"results":"109","hashOfConfig":"85"},{"size":10311,"mtime":1688055249114,"results":"110","hashOfConfig":"85"},{"size":553,"mtime":1687749796371,"results":"111","hashOfConfig":"85"},{"size":560,"mtime":1687749796361,"results":"112","hashOfConfig":"85"},{"size":163,"mtime":1686296946000,"results":"113","hashOfConfig":"85"},{"size":630,"mtime":1687749796366,"results":"114","hashOfConfig":"85"},{"size":6657,"mtime":1688050236543,"results":"115","hashOfConfig":"85"},{"size":407,"mtime":1687601050000,"results":"116","hashOfConfig":"85"},{"size":983,"mtime":1688061204030,"results":"117","hashOfConfig":"85"},{"size":5607,"mtime":1688061143930,"results":"118","hashOfConfig":"85"},{"size":2662,"mtime":1688061113944,"results":"119","hashOfConfig":"85"},{"size":7885,"mtime":1688054504772,"results":"120","hashOfConfig":"85"},{"size":9467,"mtime":1688050401701,"results":"121","hashOfConfig":"85"},{"size":5541,"mtime":1688053765827,"results":"122","hashOfConfig":"85"},{"size":569,"mtime":1687749796355,"results":"123","hashOfConfig":"85"},{"size":1540,"mtime":1687526311536,"results":"124","hashOfConfig":"85"},{"size":750,"mtime":1687251976166,"results":"125","hashOfConfig":"85"},{"size":5593,"mtime":1688060368722,"results":"126","hashOfConfig":"85"},{"size":7295,"mtime":1688049768935,"results":"127","hashOfConfig":"85"},{"size":4637,"mtime":1687751216000,"results":"128","hashOfConfig":"85"},{"size":606,"mtime":1688012098000,"results":"129","hashOfConfig":"85"},{"size":606,"mtime":1688012098000,"results":"130","hashOfConfig":"85"},{"size":600,"mtime":1688012098000,"results":"131","hashOfConfig":"85"},{"size":618,"mtime":1688012098000,"results":"132","hashOfConfig":"85"},{"size":2725,"mtime":1687968298000,"results":"133","hashOfConfig":"85"},{"size":740,"mtime":1687588046000,"results":"134","hashOfConfig":"85"},{"size":3165,"mtime":1687601000000,"results":"135","hashOfConfig":"85"},{"size":676,"mtime":1687588046000,"results":"136","hashOfConfig":"85"},{"size":547,"mtime":1687588046000,"results":"137","hashOfConfig":"85"},{"size":547,"mtime":1687588046000,"results":"138","hashOfConfig":"85"},{"size":544,"mtime":1687588046000,"results":"139","hashOfConfig":"85"},{"size":544,"mtime":1687588046000,"results":"140","hashOfConfig":"85"},{"size":550,"mtime":1687588046000,"results":"141","hashOfConfig":"85"},{"size":2204,"mtime":1687752558000,"results":"142","hashOfConfig":"85"},{"size":7774,"mtime":1687999900000,"results":"143","hashOfConfig":"85"},{"size":5109,"mtime":1688012018000,"results":"144","hashOfConfig":"85"},{"size":3608,"mtime":1687761126000,"results":"145","hashOfConfig":"85"},{"size":1032,"mtime":1687588046000,"results":"146","hashOfConfig":"85"},{"size":3946,"mtime":1687588046000,"results":"147","hashOfConfig":"85"},{"size":4780,"mtime":1687588046000,"results":"148","hashOfConfig":"85"},{"size":565,"mtime":1687588046000,"results":"149","hashOfConfig":"85"},{"size":567,"mtime":1687588046000,"results":"150","hashOfConfig":"85"},{"size":566,"mtime":1687588046000,"results":"151","hashOfConfig":"85"},{"size":650,"mtime":1687588046000,"results":"152","hashOfConfig":"85"},{"size":639,"mtime":1687588046000,"results":"153","hashOfConfig":"85"},{"size":659,"mtime":1687588046000,"results":"154","hashOfConfig":"85"},{"size":650,"mtime":1687588046000,"results":"155","hashOfConfig":"85"},{"size":614,"mtime":1687588046000,"results":"156","hashOfConfig":"85"},{"size":617,"mtime":1687588046000,"results":"157","hashOfConfig":"85"},{"size":611,"mtime":1687588046000,"results":"158","hashOfConfig":"85"},{"size":611,"mtime":1687588046000,"results":"159","hashOfConfig":"85"},{"size":614,"mtime":1687588046000,"results":"160","hashOfConfig":"85"},{"size":3734,"mtime":1687930858000,"results":"161","hashOfConfig":"85"},{"size":4364,"mtime":1687759570000,"results":"162","hashOfConfig":"85"},{"size":1037,"mtime":1687588046000,"results":"163","hashOfConfig":"85"},{"size":1604,"mtime":1687588046000,"results":"164","hashOfConfig":"85"},{"size":10878,"mtime":1688066172383,"results":"165","hashOfConfig":"85"},{"size":7215,"mtime":1688010140000,"results":"166","hashOfConfig":"85"},{"size":3209,"mtime":1688061161006,"results":"167","hashOfConfig":"85"},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},"q8t17g",{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178"},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":null},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188"},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192"},{"filePath":"193","messages":"194","suppressedMessages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196"},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200"},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204"},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208"},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212"},{"filePath":"213","messages":"214","suppressedMessages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216"},{"filePath":"217","messages":"218","suppressedMessages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220"},{"filePath":"221","messages":"222","suppressedMessages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","suppressedMessages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","suppressedMessages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230"},{"filePath":"231","messages":"232","suppressedMessages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234"},{"filePath":"235","messages":"236","suppressedMessages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238"},{"filePath":"239","messages":"240","suppressedMessages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"242","messages":"243","suppressedMessages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","suppressedMessages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248"},{"filePath":"249","messages":"250","suppressedMessages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","suppressedMessages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","suppressedMessages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258"},{"filePath":"259","messages":"260","suppressedMessages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262"},{"filePath":"263","messages":"264","suppressedMessages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"266","messages":"267","suppressedMessages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"269","messages":"270","suppressedMessages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"272","messages":"273","suppressedMessages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","suppressedMessages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278"},{"filePath":"279","messages":"280","suppressedMessages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"282","messages":"283","suppressedMessages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"285","messages":"286","suppressedMessages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288"},{"filePath":"289","messages":"290","suppressedMessages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292"},{"filePath":"293","messages":"294","suppressedMessages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"297"},{"filePath":"298","messages":"299","suppressedMessages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301"},{"filePath":"302","messages":"303","suppressedMessages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305"},{"filePath":"306","messages":"307","suppressedMessages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"309","messages":"310","suppressedMessages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"312","messages":"313","suppressedMessages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315"},{"filePath":"316","messages":"317","suppressedMessages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319"},{"filePath":"320","messages":"321","suppressedMessages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"323"},{"filePath":"324","messages":"325","suppressedMessages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327"},{"filePath":"328","messages":"329","suppressedMessages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"331","messages":"332","suppressedMessages":"333","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"334","messages":"335","suppressedMessages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"337","messages":"338","suppressedMessages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"340","messages":"341","suppressedMessages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343"},{"filePath":"344","messages":"345","suppressedMessages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"347","messages":"348","suppressedMessages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"350","messages":"351","suppressedMessages":"352","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353"},{"filePath":"354","messages":"355","suppressedMessages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"357","messages":"358","suppressedMessages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"360","messages":"361","suppressedMessages":"362","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"363","messages":"364","suppressedMessages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"366","messages":"367","suppressedMessages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"369","messages":"370","suppressedMessages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372"},{"filePath":"373","messages":"374","suppressedMessages":"375","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"376","messages":"377","suppressedMessages":"378","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"379","messages":"380","suppressedMessages":"381","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"382","messages":"383","suppressedMessages":"384","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"385","messages":"386","suppressedMessages":"387","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"388","messages":"389","suppressedMessages":"390","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391"},{"filePath":"392","messages":"393","suppressedMessages":"394","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"395","messages":"396","suppressedMessages":"397","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"398","messages":"399","suppressedMessages":"400","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"401","messages":"402","suppressedMessages":"403","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"404","messages":"405","suppressedMessages":"406","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"407","messages":"408","suppressedMessages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"410","messages":"411","suppressedMessages":"412","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"413","messages":"414","suppressedMessages":"415","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"416","messages":"417","suppressedMessages":"418","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"419","messages":"420","suppressedMessages":"421","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"422","messages":"423","suppressedMessages":"424","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"425","messages":"426","suppressedMessages":"427","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"428","messages":"429","suppressedMessages":"430","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"431"},{"filePath":"432","messages":"433","suppressedMessages":"434","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"435"},{"filePath":"436","messages":"437","suppressedMessages":"438","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"439","messages":"440","suppressedMessages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"442","messages":"443","suppressedMessages":"444","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"445","messages":"446","suppressedMessages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448"},{"filePath":"449","messages":"450","suppressedMessages":"451","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"452"},"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/index.tsx",[],[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/reportWebVitals.ts",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/App.tsx",["453","454"],[],"import React, {useEffect, useRef} from 'react';\n\nimport \"./styles/App.css\"\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Main from \"./pages/Main\";\nimport Cook from \"./pages/item/Cook\";\nimport Etc from \"./pages/item/Etc\";\nimport Mat from \"./pages/item/Mat\";\nimport ItemDetail from \"./pages/item/ItemDetail\";\nimport ItemAll from \"./pages/item/ItemAll\";\nimport Chair from \"./pages/item/Chair\";\nimport Tent from \"./pages/item/Tent\";\nimport Login from \"./pages/login/Login\";\nimport SignUp from \"./pages/login/SignUp\";\nimport Cart from \"./pages/payment/Cart\";\nimport Order from \"./pages/payment/Order\";\nimport AdminDashboard from \"./pages/admin/AdminDashboard\";\nimport AdminBoard from \"./pages/admin/AdminBoard\";\nimport AdminMember from \"./pages/admin/AdminMember\";\nimport AdminStock from \"./pages/admin/AdminStock\";\nimport FindAccount from \"./pages/login/FindAccount\";\nimport FindPassword from \"./pages/login/FindPassword\";\nimport MyPage from \"./pages/login/MyPage\";\nimport OrderList from \"./pages/login/OrderList\";\nimport OrderDetail from \"./pages/payment/OrderDetail\";\nimport CampStroy from \"./pages/community/CampStroy\";\nimport CommunityDashboard from \"./pages/community/CommunityDashboard\";\nimport FreeBoard from \"./pages/community/FreeBoard\";\nimport GatherCamperBoard from \"./pages/community/GatherCamperBoard\";\nimport ReviewCamping from \"./pages/community/ReviewCamping\";\nimport BoardDetail from \"./pages/community/BoardDetail\";\nimport BoardWrite from \"./pages/community/BoardWrite\";\nimport axios from \"axios\";\n\nfunction App() {\n    const logoutTimerRef = useRef<NodeJS.Timeout | null>(null);\n    let isLoggedIn = sessionStorage.getItem(\"username\");\n    useEffect(() => {\n        if(isLoggedIn != null && isLoggedIn.length >0){\n            // 로그아웃 타이머 변수\n            let logoutTimeout: NodeJS.Timeout | null = null;\n            const logout = () => {\n                axios\n                    .post(\"/logout\", null, {\n                        withCredentials: true,\n                    })\n                    .then((response) => {\n                        sessionStorage.clear();\n                        alert(\"로그아웃 되었습니다. 다시 로그인 해주세요.\");\n                        window.location.href = '/login';\n                    })\n                    .catch((error) => {\n                        console.log(error.response.data);\n                        alert(\"로그아웃 실패\");\n                        window.location.href =\"/\";\n                    });\n            };\n            const startLogoutTimer = () => {\n                logoutTimeout = setTimeout(() => {\n                    logout();\n                }, 60000 * 60);\n            };\n            const resetLogoutTimer = () => {\n                if (logoutTimeout) {\n                    clearTimeout(logoutTimeout);\n                }\n                startLogoutTimer();\n            };\n            const handleInteraction = () => {\n                resetLogoutTimer();\n            };\n\n            // 로그인 상태일 때만 타이머 시작\n            if (isLoggedIn != null) {\n                startLogoutTimer();\n            }\n            // 로그인 시 사용자 상호작용 이벤트 리스너 등록\n            window.addEventListener('mousemove', handleInteraction);\n            window.addEventListener('keydown', handleInteraction);\n            window.addEventListener('click', handleInteraction);\n\n            // 컴포넌트가 언마운트될 때 이벤트 리스너 해제\n            return () => {\n                if (logoutTimeout) {\n                    clearTimeout(logoutTimeout);\n                }\n                window.removeEventListener('mousemove', handleInteraction);\n                window.removeEventListener('keydown', handleInteraction);\n                window.removeEventListener('click', handleInteraction);\n            };\n        }\n    }, [isLoggedIn]);\n\n    return (\n\n        <div>\n            <BrowserRouter>\n                <Header/>\n\n                <main>\n                    <Routes>\n                        <Route path='/' element={<Main/>}/>\n\n                        {/* 호준 로그인 관련 페이지 */}\n                        <Route path='/login' element={<Login/>}/>\n                        <Route path='/signup' element={<SignUp/>}/>\n                        <Route path='/mypage' element={<MyPage/>}/>\n                        <Route path='/findaccount' element={<FindAccount/>}/>\n                        <Route path='/findpassword' element={<FindPassword/>}/>\n\n                        {/* 민수 커뮤니티 관련 페이지 */}\n                        <Route path='/campstory' element={<CampStroy/>}/>\n                        <Route path='/community' element={<CommunityDashboard/>}/>\n                        <Route path='/freeboard' element={<FreeBoard/>}/>\n                        <Route path='/gathercamper' element={<GatherCamperBoard/>}/>\n                        <Route path='/reviewcamping' element={<ReviewCamping/>}/>\n                        <Route path='/boarddetail/:category/:id' element={<BoardDetail/>}/>\n                        <Route path='/writepost/:category' element={<BoardWrite/>}/>\n\n                        {/* 신준 상품 관련 페이지 */}\n                        <Route path='/itemall' element={<ItemAll/>}/>\n                        <Route path='/itemdetail/:categoryId/:itemId' element={<ItemDetail/>}/>\n                        <Route path='/cook' element={<Cook/>}/>\n                        <Route path='/etc' element={<Etc/>}/>\n                        <Route path='/mat' element={<Mat/>}/>\n                        <Route path='/chair' element={<Chair/>}/>\n                        <Route path='/tent' element={<Tent/>}/>\n\n                        {/* 종윤 결제 관련 페이지 */}\n                        <Route path='/cart' element={<Cart/>}/>\n                        <Route path='/order' element={<Order/>}/>\n                        <Route path='/orderdetail' element={<OrderDetail/>}/>\n\n                        {/* 민우 관리자 페이지 */}\n                        <Route path='/admindashboard' element={<AdminDashboard/>}/>\n                        <Route path='/adminboard' element={<AdminBoard/>}/>\n                        <Route path='/adminmember' element={<AdminMember/>}/>\n                        <Route path='/adminstock' element={<AdminStock/>}/>\n                    </Routes>\n                </main>\n\n                <Footer/>\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/Main.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/components/Header.tsx",["455","456","457","458"],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/item/Mat.tsx",["459"],[],"import React, { useEffect, useState } from 'react';\nimport { Item } from \"../../types\";\nimport axios from \"axios\";\nimport ItemLayOut from \"./ItemLayOut\";\n\nconst Etc = () => {\n    const [items, setItems] = useState<Item[]>([]);\n    const [isLoading, setIsLoading] = useState(false);\n\n    const fetchItems = () => {\n        setIsLoading(true);\n        axios.get('/mat')\n            .then(response => setItems(prevItems => [...prevItems, ...response.data]))\n            .catch(error => console.log(error))\n            .finally(() => setIsLoading(false));\n    };\n\n    const loadMoreItems = () => {\n        fetchItems();\n    };\n\n    useEffect(() => {\n        fetchItems();\n    }, []);\n\n    return (\n        <ItemLayOut items={items} topText=\"침낭/매트\" onLoadMore={loadMoreItems}  fetchItems={fetchItems}/>\n    );\n};\n\nexport default Etc;","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/item/Tent.tsx",["460"],[],"import React, { useEffect, useState } from 'react';\nimport { Item } from \"../../types\";\nimport axios from \"axios\";\nimport ItemLayOut from \"./ItemLayOut\";\n\nconst Etc = () => {\n    const [items, setItems] = useState<Item[]>([]);\n    const [isLoading, setIsLoading] = useState(false);\n\n    const fetchItems = () => {\n        setIsLoading(true);\n        axios.get('/tent')\n            .then(response => setItems(prevItems => [...prevItems, ...response.data]))\n            .catch(error => console.log(error))\n            .finally(() => setIsLoading(false));\n    };\n\n    const loadMoreItems = () => {\n        fetchItems();\n    };\n\n    useEffect(() => {\n        fetchItems();\n    }, []);\n\n    return (\n        <ItemLayOut items={items} topText=\"텐트/타프\" onLoadMore={loadMoreItems}  fetchItems={fetchItems}/>\n    );\n};\n\nexport default Etc;","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/item/Chair.tsx",["461"],[],"import React, { useEffect, useState } from 'react';\nimport { Item } from \"../../types\";\nimport axios from \"axios\";\nimport ItemLayOut from \"./ItemLayOut\";\n\nconst Etc = () => {\n    const [items, setItems] = useState<Item[]>([]);\n    const [isLoading, setIsLoading] = useState(false);\n\n    const fetchItems = () => {\n        setIsLoading(true);\n        axios.get('/chair')\n            .then(response => setItems(prevItems => [...prevItems, ...response.data]))\n            .catch(error => console.log(error))\n            .finally(() => setIsLoading(false));\n    };\n\n    const loadMoreItems = () => {\n        fetchItems();\n    };\n\n    useEffect(() => {\n        fetchItems();\n    }, []);\n\n    return (\n        <ItemLayOut items={items} topText=\"테이블/체어\" onLoadMore={loadMoreItems}  fetchItems={fetchItems}/>\n    );\n};\n\nexport default Etc;","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/item/Etc.tsx",["462"],[],"import React, { useEffect, useState } from 'react';\nimport { Item } from \"../../types\";\nimport axios from \"axios\";\nimport ItemLayOut from \"./ItemLayOut\";\n\nconst Etc = () => {\n    const [items, setItems] = useState<Item[]>([]);\n    const [isLoading, setIsLoading] = useState(false);\n\n    const fetchItems = () => {\n        setIsLoading(true);\n        axios.get('/etc')\n            .then(response => setItems(prevItems => [...prevItems, ...response.data]))\n            .catch(error => console.log(error))\n            .finally(() => setIsLoading(false));\n    };\n\n    const loadMoreItems = () => {\n        fetchItems();\n    };\n\n    useEffect(() => {\n        fetchItems();\n    }, []);\n\n    return (\n        <ItemLayOut items={items} topText=\"기타\" onLoadMore={loadMoreItems}  fetchItems={fetchItems}/>\n    );\n};\n\nexport default Etc;","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/components/Footer.tsx",["463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478","479","480","481"],[],"import \"../styles/footer.css\";\nimport {Link} from \"react-router-dom\";\nexport default function Footer() {\n    return (\n        <footer>\n            <section>\n                <div className=\"inner\">\n                    <ul className=\"menu\">\n                        <li><a href=\"javascript:void(0)\">회사소개</a></li>\n                        <li><a href=\"javascript:void(0)\">개인정보 처리방침</a></li>\n                        <li><a href=\"javascript:void(0)\">영상정보처리기기 운영관리 방침</a></li>\n                        <li><a href=\"javascript:void(0)\">홈페이지 이용약관</a></li>\n                        <li><a href=\"javascript:void(0)\">위치정보 이용약관</a></li>\n                        <li><a href=\"javascript:void(0)\">윤리경영</a></li>\n                    </ul>\n\n                    <div className=\"btn-group\">\n                        <a href=\"javascript:void(0)\" className=\"btn btn--white\">문의방법</a>\n                        <a href=\"javascript:void(0)\" className=\"btn btn--white\">신규물품 입점제안</a>\n                        <a href=\"javascript:void(0)\" className=\"btn btn--white\">사이트맵</a>\n                    </div>\n\n                    <div className=\"info\">\n                        <span>사업자등록번호 123-45-67890</span>\n                        <span>(주)CAMPERBLIC.</span>\n                        <span>TEL : 031) 1234-1234 / FAX : 031)1111-2222</span>\n                        <span>개인정보 책임자 : 김호준</span>\n                    </div>\n\n                    <p className=\"copyright\">\n                        &copy; <span className=\"this-year\"></span>CAMPERBLIC. Company. All Rights Reseved.\n                    </p>\n\n                </div>\n\n            </section>\n        </footer>\n    )\n}","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/item/Cook.tsx",["482"],[],"import React, { useEffect, useState } from 'react';\nimport { Item } from \"../../types\";\nimport axios from \"axios\";\nimport ItemLayOut from \"./ItemLayOut\";\n\nconst Etc = () => {\n    const [items, setItems] = useState<Item[]>([]);\n    const [isLoading, setIsLoading] = useState(false);\n\n    const fetchItems = () => {\n        setIsLoading(true);\n        axios.get('/cook')\n            .then(response => setItems(prevItems => [...prevItems, ...response.data]))\n            .catch(error => console.log(error))\n            .finally(() => setIsLoading(false));\n    };\n\n    const loadMoreItems = () => {\n        fetchItems();\n    };\n\n    useEffect(() => {\n        fetchItems();\n    }, []);\n\n    return (\n        <ItemLayOut items={items} topText=\"취사용품\" onLoadMore={loadMoreItems} fetchItems={fetchItems}/>\n    );\n};\n\nexport default Etc;","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/item/ItemAll.tsx",["483","484"],[],"import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Item } from \"../../types\";\nimport axios from \"axios\";\nimport ItemLayOut from \"./ItemLayOut\";\n\nconst ItemAll = () => {\n    const [items, setItems] = useState<Item[]>([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [currentPage, setCurrentPage] = useState(1); // 현재 페이지 상태 추가\n\n    const fetchItems = async (page: number) => {\n        setIsLoading(true);\n\n        try {\n            const [cookResponse, etcResponse, matResponse, chairResponse, tentResponse] = await Promise.all([\n                axios.get(`/cook?page=${page}`),\n                axios.get(`/etc?page=${page}`),\n                axios.get(`/mat?page=${page}`),\n                axios.get(`/chair?page=${page}`),\n                axios.get(`/tent?page=${page}`)\n            ]);\n\n            const nextPageItems = [\n                ...cookResponse.data,\n                ...etcResponse.data,\n                ...matResponse.data,\n                ...chairResponse.data,\n                ...tentResponse.data\n            ];\n\n            setItems(prevItems => [...prevItems, ...nextPageItems]);\n        } catch (error) {\n            console.error('상품 가져오기 실패:', error);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const loadMoreItems = () => {\n        const nextPage = currentPage + 1; // 다음 페이지 계산\n        fetchItems(nextPage);\n        setCurrentPage(nextPage); // 현재 페이지 업데이트\n    };\n\n    useEffect(() => {\n        fetchItems(1);\n    }, []);\n\n    return (\n        <ItemLayOut items={items} topText=\"전체상품\" onLoadMore={loadMoreItems} fetchItems={fetchItems}/>\n    );\n};\n\n\nexport default ItemAll;\n","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/item/ItemDetail.tsx",["485"],[],"import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport axios from \"axios\";\nimport { Item } from '../../types';\nimport \"../../styles/itemStyles/itemDetail.css\";\n\nconst ItemDetail = () => {\n    const { itemId, categoryId } = useParams<{ itemId: string, categoryId: string }>();\n    const [item, setItem] = useState<Item>();\n    const [count, setCount] = useState(1);\n    const [isAddedToCart, setIsAddedToCart] = useState(false);\n\n    const addToCart = () => {\n        axios\n            .put(`/cart/${count}`, null, { withCredentials: true, params: item })\n            .then(() => {\n                setIsAddedToCart(true);\n                alert(\"상품이 장바구니에 담겼습니다.\");\n            })\n            .catch((error) => {\n                alert(\"상품을 장바구니에 추가하는 데 실패했습니다.\");\n                console.error('상품을 장바구니에 추가하는 데 실패했습니다.', error);\n            });\n    };\n\n    const handleQuantityChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setCount(parseInt(event.target.value));\n    };\n\n    useEffect(() => {\n        axios\n            .get(`/itemdetail/${categoryId}/${itemId}`)\n            .then((response) => {\n                setItem(response.data)\n                console.log(item);\n            })\n            .catch((error) => {\n                console.error('게시물을 가져오는 데 실패했습니다.', error);\n            });\n    }, [itemId]);\n\n    if (!item) {\n        return <p>로딩 중...</p>;\n    }\n\n    return (\n        <>\n            <Link to=\"/\"><h1 className=\"detailTop\">CAMPERBLIC.</h1></Link>\n            <div className=\"item-detail-container\">\n                <div className=\"item-detail-image\">\n                    {item && <img src={item?.imagePath} alt={item.name} />}\n                </div>\n                <div className=\"item-detail-content\">\n                    <h1 className=\"item-detail-title\">{item?.categoryId}의 {item?.name} 상세페이지입니다</h1>\n                    <h2 className=\"item-detail-subtitle\">{item?.name}</h2>\n                    <p className=\"item-detail-text\">가격: {item?.price}</p>\n                    <p className=\"item-detail-text\">설명: {item?.description}</p>\n                    <p className=\"item-detail-text\">카테고리 ID: {item?.categoryId}</p>\n                    <p className=\"item-detail-text\">재고: {item?.currentStock}</p>\n\n                    <div className=\"quantity-container\">\n                        <label htmlFor=\"quantity\">수량:</label>\n                        <div className=\"quantity-input\">\n                            <input\n                                type=\"number\"\n                                id=\"quantity\"\n                                value={count}\n                                onChange={handleQuantityChange}\n                                min={1}\n                                max={item.currentStock}\n                            />\n                        </div>\n                    </div>\n\n                    <button onClick={addToCart} className=\"item-detail-link\">장바구니 담기</button>\n\n                    {isAddedToCart && (\n                        <div className=\"item-detail-cart-message\">\n                            <p className=\"ptagCart\">상품이 장바구니에 담겼습니다.</p>\n                            <Link to=\"/cart\" className=\"item-detail-go-to-cart-button\">\n                                장바구니로 이동하기\n                            </Link>\n                        </div>\n                    )}\n                </div>\n            </div>\n            <div className=\"item-detail-description\">\n                {/*<p>상세 설명 내용</p>*/}\n                <img src={item.detailPath} alt={item.name} />\n            </div>\n        </>\n    );\n};\n\nexport default ItemDetail;\n","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/login/MyPage.tsx",["486","487"],[],"import React, {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport RenderUserInformation from './RenderUserInformation';\r\nimport {Member, Order} from \"../../types\";\r\nimport {Simulate} from \"react-dom/test-utils\";\r\nimport error = Simulate.error;\r\nimport OrderList from \"./OrderList\";\r\nimport \"../../styles/loginStyles/MyPage.css\"\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nconst MyPage = () => {\r\n    const history = useNavigate();\r\n    const [user, setUser] = useState<Member>({\r\n        userid: \"\",\r\n        name: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n        address1: \"\",\r\n        address2: \"\",\r\n        address3: \"\",\r\n        address4: \"\",\r\n        createdDate: \"\",\r\n    });\r\n    const [orders, setOrders] = useState<Order[]>([]);\r\n    const [isUser, setIsUser] = useState<boolean>(false);\r\n    const [isUserOrder, setIsUserOrder] = useState<boolean>(false);\r\n    useEffect(() => {\r\n        // 유저 정보를 가져오는 API 호출\r\n        axios\r\n            .get('/mypage', {withCredentials: true})\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    const {member, orders} = response.data;\r\n                    setUser(member);\r\n                    setOrders(orders);\r\n                    sessionStorage.setItem(\"username\", member.name);\r\n                    if (member != null) {\r\n                        setIsUser(true);\r\n                    }\r\n                    if (orders.length > 0) {\r\n                        setIsUserOrder(true);\r\n                    }\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                if (error.response.status === 500) {\r\n                    alert(\"서버에 문제가 있습니다. 잠시만 기다려주세요.\");\r\n                    console.log(error.response.data);\r\n                    history(\"/\");\r\n                } else if (error.response.status === 423) {\r\n                    sessionStorage.clear();\r\n                    alert(\"사용자를 찾지 못했습니다. 로그인 상태를 확인해주세요.\");\r\n                    history(\"/login\")\r\n                }\r\n            });\r\n    }, []);\r\n\r\n    return (\r\n        <section>\r\n            <div className=\"mypageMainDiv\">\r\n                <div className={\"myPageComDiv\"}>\r\n                    {isUser && <RenderUserInformation user={user}/>}\r\n                    {isUserOrder && <OrderList orders={orders}/>}\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default MyPage;\r\n","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/login/OrderList.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/login/FindAccount.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/login/Login.tsx",["488"],[],"import React, {useEffect, useState} from 'react';\r\nimport '../../styles/loginStyles/Login.css';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport {Link} from 'react-router-dom';\r\nimport axios from \"axios\";\r\n\r\ninterface LoginFrom {\r\n    userid: string,\r\n    password: string,\r\n}\r\n\r\n\r\nconst Login = () => {\r\n    const history = useNavigate();\r\n    const [loginForm, setLoginForm] = useState<LoginFrom>({\r\n        userid: '',\r\n        password: '',\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (sessionStorage.getItem(\"username\") != null) {\r\n            history(\"/\");\r\n        }\r\n    }, [])\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setLoginForm({...loginForm, [e.target.name]: e.target.value});\r\n    };\r\n\r\n    const LoginBtn = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        axios.post('/login', loginForm, {withCredentials: true})\r\n            .then((response) => {\r\n                // 로그인 성공 시 홈으로 이동\r\n                if (response.status === 200) {\r\n                    console.log(response.data.message);\r\n                    const username = response.data.username;\r\n                    const userId = response.data.userId;\r\n                    sessionStorage.setItem(\"username\", username);\r\n                    sessionStorage.setItem(\"userId\", userId);\r\n                    window.location.href = \"/\";\r\n                    alert('로그인 성공');\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                if (error.response.status === 404) {\r\n                    console.error(error);\r\n                    alert(\"사용자를 찾을 수 없습니다.\");\r\n                } else if (error.response.status === 401) {\r\n                    alert(\"사용자를 찾을 수 없습니다.\");\r\n                }else if(error.response.status === 406){\r\n                    alert(\"비밀번호가 일치하지 않습니다.\");\r\n                } else {\r\n                    console.error(error.response.data);\r\n\r\n                }\r\n            });\r\n    };\r\n\r\n    // 세션에 사용자 이름이 있다면 마이페이지로 이동하는 함수\r\n    const username = sessionStorage.getItem(\"username\");\r\n    const goToMyPage = () => {\r\n        if (username) {\r\n            history(`/mypage/${username}`); // 마이페이지 경로로 이동\r\n        } else {\r\n            alert(\"세션에 사용자 이름이 없습니다.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <section>\r\n            <div className={\"loginMainDiv\"}>\r\n                <div className={'loginFormDiv'}>\r\n                    <h1 className={'loginH1'}>CAMPERBLIC.</h1>\r\n                    <div className={'borderDiv'}>\r\n                        <form onSubmit={LoginBtn}>\r\n                            <div className={\"inputMainDiv\"}>\r\n                                <input type={\"text\"} placeholder={\"아이디\"} name={\"userid\"} onChange={handleInputChange}/>\r\n                                <input type={\"password\"} placeholder={\"비밀번호\"} name={\"password\"}\r\n                                       onChange={handleInputChange}/>\r\n                            </div>\r\n                            <div>\r\n                                <button className={'loginBtn'}>로그인</button>\r\n                            </div>\r\n                        </form>\r\n                        <div className={'linkTODiv'}>\r\n                            <Link to='/findaccount' className={'linkTo'}> 아이디 찾기 </Link>\r\n                            <Link to='/findpassword' className={'linkTo'}>비밀번호 찾기 </Link>\r\n                            <Link to='/signup'> 회원가입</Link>\r\n                        </div>\r\n\r\n                        {username && <button onClick={goToMyPage}>마이페이지</button>} {/* 세션에 사용자 이름이 있을 경우에만 버튼 표시 */}\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Login;","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/login/FindPassword.tsx",["489","490","491","492"],[],"import React, {useEffect, useState} from 'react';\r\nimport axios from \"axios\";\r\nimport {Simulate} from \"react-dom/test-utils\";\r\nimport error = Simulate.error;\r\nimport {Member} from \"../../types\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport \"../../styles/loginStyles/FindPassword.css\"\r\nconst FindPassword = () => {\r\n    const history = useNavigate();\r\n    const [userIdData, setUserIdData] = useState(\"\");\r\n    const [changePw, setChangePw] = useState(\"\");\r\n    const [flag, setFlag] = useState(0);\r\n    const passwordRegex = /^(?!.*[<>])(?!.*\\badmin\\b)(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,20}$/;\r\n    const [userDataPw, setUserDataPw] = useState<Member>({\r\n        userid: \"\",\r\n        name: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n        address1: \"\",\r\n        address2: \"\",\r\n        address3: \"\",\r\n        address4: \"\",\r\n        createdDate: \"\",\r\n    });\r\n\r\n    const validateForm = () => {\r\n        if (!passwordRegex.test(changePw)) {\r\n            alert(\"올바른 비밀번호 형식이 아닙니다.\\n\" +\r\n                \"\\\"영문 대소문자,숫자,특수문자(@,$,! %,*,?,&) 하나이상 포함 8자 이상 20자 이하입니다.\\\"\");\r\n            document.getElementById(\"password\")?.focus();\r\n            return false;\r\n        }\r\n         return true;\r\n    }\r\n\r\n    const handleChan = ((e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setUserIdData(e.target.value);\r\n    });\r\n    const handlePw = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        axios.get(\"/finduserid\", {params: {userIdData: userIdData}})\r\n            .then((response) => {\r\n                setUserDataPw({...response.data});\r\n                setFlag(1);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n                alert(\"아이디가 일치하지 않습니다.\")\r\n            });\r\n    };\r\n    const handleChangePw = ((e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setChangePw(e.target.value);\r\n    });\r\n\r\n    const handleChangeForm = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n        e.preventDefault();\r\n        if (!validateForm()) {\r\n            return;\r\n        }\r\n        axios.put(\"/changepw\", userDataPw, {params: {changePw: changePw}})\r\n            .then((response) => {\r\n                alert(response.data)\r\n            })\r\n            .catch((error) => {\r\n                console.log(error.response.data);\r\n\r\n            })\r\n    };\r\n\r\n\r\n    return (\r\n        <section>\r\n            <div className={\"findPwMainDiv\"}>\r\n                <div className={\"findPwDiv\"}>\r\n                    <h1>CAMPERBLIC.</h1>\r\n                    <form onSubmit={handlePw} className={\"findPwFormDiv\"}>\r\n                        <div className={\"findPwInputDiv\"}>\r\n                            <label htmlFor={\"name\"}>아이디</label>\r\n                            <input type={\"text\"} id={\"name\"} name={\"userid\"} placeholder={\"아이디를 입력하세요\"} onChange={handleChan}/>\r\n                        </div>\r\n                        <button type={\"submit\"} className={\"findPwChangeBtn\"}>다음</button>\r\n                    </form>\r\n                    {flag == 1 &&\r\n                      <div className={\"findPwChangeInputDiv\"}>\r\n                        <label htmlFor={\"password\"}>비밀번호 변경</label>\r\n                        <input type={\"text\"} name={\"password\"} placeholder={\"변경할 비밀번호를 입력해주세요.\"}\r\n                               onChange={handleChangePw} id={\"password\"}/>\r\n                        <button className={\"findPwChangeBtn\"} type={\"button\"} onClick={handleChangeForm}>변경하기</button>\r\n                      </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default FindPassword;","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/payment/Order.tsx",["493"],[],"import React, {useEffect, useState} from 'react';\nimport \"../../styles/paymentStyles/Order.css\";\nimport TitleLayout from \"./TitleLayout\";\nimport ChargeBox from \"./ChargeBox\";\nimport ItemlistOrder from \"./ItemlistOrder\";\nimport axios from \"axios\";\nimport {useNavigate} from \"react-router-dom\";\n\nexport interface OrderList {\n    cartid: number,\n    image_path: string,\n    name: string,\n    itemcount: number,\n    price: number,\n}\n\n\nconst Order = () => {\n    const [orders, setOrders] = useState<OrderList[] | null>(null);\n    const [loading, setLoading] = useState(true); // 로딩 상태를 관리하기 위한 상태 변수 추가\n    const history = useNavigate();\n\n    useEffect(() => {\n        axios.get('/cart', {withCredentials : true})\n            .then(response => {\n                console.log(response.data);\n                setOrders(response.data);\n                setLoading(false); // 로딩 상태 변경\n            })\n            .catch(error => {\n                if (error.response.status === 423) {\n                    sessionStorage.clear();\n                    alert(\"사용자를 찾지 못했습니다. 로그인 상태를 확인해주세요.\");\n                    history(\"/login\")\n                }\n                console.log(error);\n                setLoading(false); // 로딩 상태 변경\n            })\n\n    }, []);\n\n    if (loading) {\n        return <div>Loading...</div>; // 로딩 중일 때 표시할 UI\n    }\n\n    if (orders === null) { // 응답이 도착하지 않았거나 null인 경우\n        return <div>Loading...</div>; // 또는 로딩 중을 나타내는 다른 UI를 표시할 수 있습니다.\n    }\n\n    return (\n        <section className={\"orderLayout\"}>\n            <div className={'section_wrap'}>\n                <div className={'list_section'}>\n                    <div className={'list_inner'}>\n                        <TitleLayout/>\n                        <ItemlistOrder orders={orders}/>\n                    </div>\n                </div>\n\n                <ChargeBox />\n\n                <div className={'progress_section'}></div>\n            </div>\n        </section>\n    );\n};\n\nexport default Order;","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/payment/OrderDetail.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/AdminBoard.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/payment/Cart.tsx",["494"],[],"import React, {useEffect, useState} from 'react';\nimport \"../../styles/paymentStyles/Cart.css\";\nimport TitleLayout from \"./TitleLayout\";\nimport ItemlistCart from \"./ItemlistCart\";\nimport ChargeBox from \"./ChargeBox\";\nimport axios from \"axios\";\nimport {useNavigate} from \"react-router-dom\";\n\nexport interface CartList {\n    cartid: number,\n    image_path: string,\n    name: string,\n    itemcount: number,\n    price: number,\n}\n\nconst Cart = () => {\n    const [carts, setCarts] = useState<CartList[] | null>(null);\n    const [loading, setLoading] = useState(true); // 로딩 상태를 관리하기 위한 상태 변수 추가\n    const history = useNavigate();\n    const [rflag , setFlag] = useState<boolean>(true)\n    useEffect(() => {\n        axios.get('/cart', {withCredentials : true})\n            .then(response => {\n                console.log(response.data);\n                setCarts(response.data);\n                setLoading(false); // 로딩 상태 변경\n                history(\"/cart\");\n            })\n            .catch(error => {\n                if (error.response.status === 423) {\n                    sessionStorage.clear();\n                    alert(\"사용자를 찾지 못했습니다. 로그인 상태를 확인해주세요.\");\n                    history(\"/login\");\n                }\n                console.log(error);\n                setLoading(false); // 로딩 상태 변경\n            })\n\n    }, [rflag]);\n\n    if (loading) {\n        return <div>Loading...</div>; // 로딩 중일 때 표시할 UI\n    }\n\n    if (carts === null) { // 응답이 도착하지 않았거나 null인 경우\n        return <div>Loading...</div>; // 또는 로딩 중을 나타내는 다른 UI를 표시할 수 있습니다.\n    }\n\n    return (\n        <section className=\"cartLayout\">\n            <div className=\"section_wrap\">\n                <div className=\"list_section\">\n                    <div className=\"list_inner\">\n                        <TitleLayout/>\n                        <ItemlistCart carts={carts} setFlag={setFlag} rflag={rflag}/>\n                    </div>\n                </div>\n                <ChargeBox carts={carts}/>\n            </div>\n            <div className=\"progress_section\"></div>\n        </section>\n    );\n};\n\nexport default Cart;","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/AdminStock.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/AdminMember.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/AdminDashboard.tsx",["495","496","497","498","499"],[],"import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport AdminDashboardSecond from './components/admindashboard/AdminDashboardSecond';\nimport AdminDashboardBottom from './components/admindashboard/AdminDashboardBottom';\nimport AdminDashboardOrder from \"./components/admindashboard/AdminDashboardOrder\";\nimport {GraphDTO, Item, Posting, Tmp} from \"../../types\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport AdminDashboardGraph from \"./components/admindashboard/AdminDashboardGraph\";\nimport '../../styles/adminStyles/AdminDashboard.css';\n\nconst AdminDashboard = () => {\n    const [isOrderStatusVisible, setOrderStatusVisible] = useState(false);\n    const [items, setItems] = useState<Item[]>([]);\n    const [postings, setPostings] = useState<Posting[]>([]);\n    const [tmp,setTmp] = useState<Tmp[]>([]);\n    const [graph,setGraph] = useState<GraphDTO[]>([]);\n    const navigate = useNavigate();\n    const location = useLocation();\n\n    const toggleOrderStatus = () => {\n        setOrderStatusVisible(!isOrderStatusVisible);\n    };\n\n    useEffect(() => {\n        setOrderStatusVisible(false);\n\n        // 컨트롤러에서 값을 받아오는 API 호출\n        const fetchDashboardData = async () => {\n            try {\n                const response = await axios.get(\"/admindashboard\");\n                const { items, postings, totals } = response.data;\n                setItems(items);\n                setPostings(postings);\n            } catch (error) {\n                console.error(error);\n            }\n        };\n        fetchDashboardData();\n\n        // URL 변경\n        const path = '/admindashboard';\n        if (location.pathname !== path) {\n            window.history.replaceState(null, '', path);\n        }\n    }, [location]);\n\n    return (\n        <section>\n            <h1 className='admindashboard_first'>Camperblic관리자_대시보드</h1>\n            <AdminDashboardSecond\n                tmp={tmp}\n                isOrderStatusVisible={isOrderStatusVisible}\n                onToggleOrderStatus={toggleOrderStatus}\n            />\n            <AdminDashboardGraph/>\n            <AdminDashboardOrder tmp={tmp}/>\n            <AdminDashboardBottom items={items} postings={postings} />\n        </section>\n    );\n};\n\nexport default AdminDashboard;\n","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/community/BoardDetail.tsx",["500","501","502","503"],[],"import React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { CommentOne, Posting } from '../../types';\nimport '../../styles/communityStyles/boardDetail.css';\nimport ReplyInputContainer from './component/ReplyInputContainer';\nimport EditDeleteButtons from './component/EditDeleteButtons';\nimport CommentItem from './component/CommentItem';\n\nconst BoardDetail: React.FC = () => {\n    const { id, category } = useParams<{ id: string; category: string }>();\n    const [posting, setPosting] = useState<Posting>();\n    const [commentInput, setCommentInput] = useState('');\n    const [commentMainInput, setCommentMainInput] = useState('');\n    const [commentList, setCommentList] = useState<CommentOne[]>([]);\n    const [isReplyVisible, setReplyVisible] = useState<{ [commentId: number]: boolean }>({});\n    const [replyList, setReplyList] = useState<{ [commentId: number]: CommentOne[] }>({});\n    const [replyInputCommentId, setReplyInputCommentId] = useState<number | null>(null);\n    const [isReplyInputVisible, setReplyInputVisible] = useState(false);\n    const navigate = useNavigate();\n    const sessionUserId = sessionStorage.getItem(\"userId\");\n    const idValidation = (id: string):boolean => {\n        if(sessionUserId == \"admin\" || sessionUserId == id) return true;\n        else return false;\n    }\n\n\n    const handleParentStateChange = (commentId: number) => {\n        axios\n            .get(`/re-reply?category=${category}&root=${id}&mention=${commentId}`)\n            .then((response) => {\n                setReplyList((prevState) => ({\n                    ...prevState,\n                    [commentId]: response.data,\n                }));\n                setReplyVisible((prevState) => ({\n                    ...prevState,\n                    [commentId]: true,\n                }));\n            })\n            .catch((error) => {\n                console.error('대댓글을 가져오는 데 실패했습니다.', error);\n            });\n    };\n\n    // 댓글 가져오기\n    const fetchComments = () => {\n        axios\n            .get(`/get-comments?category=${category}&id=${id}`)\n            .then((response) => setCommentList(response.data))\n            .catch((error) => {\n                console.error('댓글을 가져오는 데 실패했습니다.', error);\n            });\n    };\n\n    // 게시글 및 댓글 정보 가져오기\n    useEffect(() => {\n        axios\n            .get(`/boarddetail/${category}/${id}`)\n            .then((response) => setPosting(response.data))\n            .catch((error) => {\n                console.error('게시물을 가져오는 데 실패했습니다.', error);\n            });\n\n        fetchComments();\n    }, [id, category]);\n\n    // 게시글 수정 페이지로 이동\n    const handleEdit = () => {\n        navigate(`/writepost/${category}?edit=true&id=${id}`);\n    };\n\n    // 게시글 삭제\n    const handleDelete = () => {\n        axios\n            .delete('/delete-posting', {\n                params: {\n                    category: category,\n                    id: id,\n                },\n            })\n            .then((response) => {\n                alert(response.data);\n                navigate(`/${category}`);\n            })\n            .catch((error) => {\n                alert('게시글 삭제에 실패했습니다:' + error);\n            });\n    };\n\n    // 이전 페이지로 이동\n    const handleGoBack = () => {\n        navigate(-1);\n    };\n\n    // 목록 페이지로 이동\n    const handleGoList = () => {\n        navigate(`/${category}`);\n    };\n\n    // 댓글 입력 내용 변경\n    const handleCommentInputChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n        setCommentInput(event.target.value);\n    };\n\n    const handleCommentMainInputChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n        setCommentMainInput(event.target.value);\n    };\n\n    // 댓글 등록\n    const handleCommentSubmit = () => {\n        if (commentMainInput.trim() !== '') {\n            axios\n                .post(\n                    `/add-comment?postid=${id}&category=${category}&content=${commentMainInput}&name=${sessionUserId}`\n                )\n                .then((response) => {\n                    setCommentMainInput('');\n                    // 댓글 등록 후 댓글 목록 업데이트\n                    fetchComments();\n                })\n                .catch((error) => {\n                    console.error('댓글 추가에 실패했습니다.', error);\n                });\n        } else {\n            alert('댓글 내용을 입력해주세요!');\n        }\n    };\n\n    const handleReCommentInput = (commentId: number) => {\n        setReplyInputCommentId(commentId);\n        setReplyInputVisible(true); // ReplyInputContainer를 보이도록 설정\n    };\n\n    const handleReply = (commentId: number) => {\n        if (isReplyVisible[commentId]) {\n            setReplyVisible((prevState) => ({\n                ...prevState,\n                [commentId]: false,\n            }));\n        } else {\n            axios\n                .get(`/re-reply?category=${category}&root=${id}&mention=${commentId}`)\n                .then((response) => {\n                    setReplyList((prevState) => ({\n                        ...prevState,\n                        [commentId]: response.data,\n                    }));\n                    setReplyVisible((prevState) => ({\n                        ...prevState,\n                        [commentId]: true,\n                    }));\n                })\n                .catch((error) => {\n                    console.error('대댓글을 가져오는 데 실패했습니다.', error);\n                });\n        }\n    };\n\n\n    // 대댓글 등록\n    const handleReplyCommentSubmit = (commentId: number, commentInput: string, commentTagName: string) => {\n        const additionalData = {\n            name: sessionUserId,\n            root: id,\n            mention: commentId,\n            tagname: commentTagName,\n            content: commentInput,\n        };\n        if (commentInput.trim() !== '') {\n            axios\n                .post(`/add-recomment/${category}`, additionalData)\n                .then((response) => {\n                    setCommentInput(''); // commentInput을 비웁니다.\n                    // 댓글 등록 후 댓글 목록 업데이트\n                    fetchComments();\n                    axios\n                        .get(`/re-reply?category=${category}&root=${id}&mention=${commentId}`)\n                        .then((response) => {\n                            setReplyList((prevState) => ({\n                                ...prevState,\n                                [commentId]: response.data,\n                            }));\n                        })\n                        .catch((error) => {\n                            console.error('대댓글을 가져오는 데 실패했습니다.', error);\n                        });\n                })\n                .catch((error) => {\n                    console.error('댓글 추가에 실패했습니다.', error);\n                });\n        } else {\n            alert('댓글 내용을 입력해주세요!');\n        }\n    };\n\n    return (\n        <section className=\"board-detail-container\">\n            <div className=\"detailDecoTop\"></div>\n\n            <article className=\"board-detail\">\n                <div className=\"container\">\n                    <div className=\"post\">\n                        <div className=\"post-info\">\n                            <div className=\"post-header\">\n                                <h3>{posting?.title}</h3>\n                                <p>글 번호: {posting?.id}</p>\n                            </div>\n                            <div className=\"post-details\">\n                                <p>\n                                    작성자: {posting?.name} | 작성일: {posting?.createdate} | 조회수: {posting?.views}\n                                </p>\n                            </div>\n                        </div>\n                        <div className=\"post-content\">\n                            <p>{posting?.content}</p>\n                        </div>\n                    </div>\n                </div>\n                {idValidation(posting?.name == null ? \"\" : posting.name) && <EditDeleteButtons handleEdit={handleEdit} handleDelete={handleDelete} />}\n                <div className=\"button-group\">\n                    <span className=\"button\" onClick={handleGoBack}>뒤로가기</span>\n                    <span className=\"button\" onClick={handleGoList}>목록으로</span>\n                </div>\n            </article>\n            <article className=\"replyContainer\">\n                {sessionUserId != null && <ReplyInputContainer\n                    commentInput={commentMainInput}\n                    handleCommentInputChange={handleCommentMainInputChange}\n                    handleCommentSubmit={handleCommentSubmit}\n                    isVisible={true}\n                    setReplyInputVisible={setReplyInputVisible}\n                />}\n                <ul className=\"replyList\">\n                    {commentList.map((comment) => (\n                        <CommentItem\n                            category={category}\n                            comment={comment}\n                            isReplyVisible={isReplyVisible[comment.id]}\n                            replyInputCommentId={replyInputCommentId}\n                            commentInput={commentInput}\n                            handleCommentInputChange={handleCommentInputChange}\n                            handleReCommentInput={handleReCommentInput}\n                            handleReply={handleReply}\n                            handleReplyCommentSubmit={handleReplyCommentSubmit}\n                            isReplyInputVisible={isReplyInputVisible}\n                            setReplyInputVisible={setReplyInputVisible}\n                            replyList={replyList[comment.id]}\n                            setReplyList={setReplyList}\n                        />\n                    ))}\n                </ul>\n            </article>\n\n            <div className=\"detailDecoBottom\"></div>\n        </section>\n    );\n};\n\nexport default BoardDetail;","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/community/FreeBoard.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/community/CampStroy.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/community/CommunityDashboard.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/community/GatherCamperBoard.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/item/ItemLayOut.tsx",["504","505","506","507","508"],[],"import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Item } from \"../../types\";\nimport axios from \"axios\";\nimport \"../../styles/itemStyles/itemLayOut.css\";\nimport AddProductModal from \"./components/AddProductModal\";\n\ninterface ItemLayOutProps {\n    items: Item[];\n    topText: string;\n    onLoadMore: () => void;\n    fetchItems: (page: number) => void;\n}\n\ninterface AddProductModalProps {\n    isOpen: boolean;\n    closeModal: () => void;\n    addProduct: (product: Item) => void;\n    categories: string[]; //\n    products: Item[]; //\n}\n\n\n\nconst ItemLayOut: React.FC<ItemLayOutProps> = ({ items, topText, onLoadMore ,fetchItems}) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [visibleItems, setVisibleItems] = useState<Item[]>([]);\n    const [page, setPage] = useState(1);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [searchQuery, setSearchQuery] = useState('');\n\n    const [isAdmin, setIsAdmin] = useState<boolean>(false);\n    const [isName, setIsName] = useState<boolean>(true);\n    const sessionUserName = sessionStorage.getItem(\"username\");\n    const [username, setUserName] = useState(\"\");\n\n    useEffect(() => {\n        if (sessionUserName != null && sessionUserName.length >= 0) {\n            setUserName(sessionUserName);\n            setIsName(false);\n        } else {\n            setIsName(true);\n        }\n        if (sessionUserName === \"admin\") {\n            setIsAdmin(true);\n        } else {\n            setIsAdmin(false);\n        }\n    }, [sessionUserName]);\n\n    useEffect(() => {\n        const filteredItems = items.filter((item) =>\n            item.name.toLowerCase().includes(searchQuery.toLowerCase())\n        );\n\n        const initialItemCount = 15;\n        const initialItems = filteredItems.slice(0, initialItemCount);\n        setVisibleItems(initialItems);\n    }, [items, searchQuery]);\n\n    useEffect(() => {\n        const handleScroll = () => {\n            if (visibleItems.length === 0) {\n                return;\n            }\n\n            const lastItem = visibleItems[visibleItems.length - 1];\n            const lastItemElement = document.getElementById(`item-${lastItem.itemId}`);\n            const lastItemRect = lastItemElement?.getBoundingClientRect();\n\n            const isLastItemVisible = lastItemRect?.bottom && lastItemRect.bottom <= window.innerHeight;\n\n            if (isLastItemVisible && !isLoading && visibleItems.length < items.length) {\n                setIsLoading(true);\n            }\n        };\n\n        window.addEventListener('scroll', handleScroll);\n\n        return () => {\n            window.removeEventListener('scroll', handleScroll);\n        };\n    }, [isLoading, visibleItems.length]);\n\n    useEffect(() => {\n        if (isLoading && visibleItems.length < items.length) {\n            const nextItemCount = visibleItems.length + 10;\n            const nextItems = items.slice(visibleItems.length, nextItemCount);\n\n            setVisibleItems(prevItems => [...prevItems, ...nextItems]);\n            setPage(prevPage => prevPage + 1);\n            setIsLoading(false);\n        }\n    }, [isLoading, items, visibleItems, page]);\n\n    useEffect(() => {\n        if (isLoading) {\n            setIsLoading(false);\n        }\n    }, [visibleItems]);\n\n    const openModal = () => {\n        setIsModalOpen(true);\n    };\n\n    const closeModal = () => {\n        setIsModalOpen(false);\n        fetchItems(0);\n    };\n\n    const addProduct = async (product: Item) => {\n        try {\n            const response = await axios.post('/item', {\n                item: product,\n                itemType: product.categoryId\n            });\n\n            if (response.status === 200) {\n                const addedProduct = response.data;\n                console.log('상품이 데이터베이스에 추가되었습니다:', addedProduct);\n                closeModal();\n            } else {\n                console.error('상품 추가 실패:', response.statusText);\n            }\n        } catch (error) {\n            console.error('상품 추가 실패:', error);\n        }\n    };\n\n    const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setSearchQuery(e.target.value);\n    };\n\n    const scrollToTop = () => {\n        window.scrollTo({ top: 0, behavior: 'smooth' });\n    };\n    console.log(visibleItems);\n    return (\n        <section className=\"itemLayOut\">\n            <div className=\"topFont\">\n                <h1 className=\"topName\"><Link className=\"topNameLink\" to=\"/\">CAMPERBLIC.</Link></h1>\n                <h1 className=\"topText\">\n                    {topText}\n                </h1>\n                {isAdmin && <button className={\"addProductButton\"} onClick={openModal}>상품 등록</button> }\n                <AddProductModal\n                    isOpen={isModalOpen}\n                    closeModal={closeModal}\n                    addProduct={addProduct}\n                    categories={['cook','chair','mat','tent','etc']} // 카테고리 값을 여기에 제공해야 합니다.\n                />\n                <input className={\"searchBox\"} type=\"text\" value={searchQuery} onChange={handleSearchChange} placeholder=\"상품명을 검색해주세요\" />\n            </div>\n            <div className=\"item-list\">\n                {visibleItems.map((item, index) => (\n                    <Link\n                        to={`/itemdetail/${item.categoryId}/${item.itemId}`}\n                        key={index}\n                    >\n                        <div id={`item-${item.itemId}`} className=\"item-card\">\n                            <div className=\"item-image\">\n                                {item.imagePath ? (\n                                    <img src={item.imagePath} alt={item.name} />\n                                ) : (\n                                    <div className=\"no-image-container\">\n                                        <span className=\"no-image-text\">이미지 없음</span>\n                                    </div>\n                                )}\n                            </div>\n                            <div className=\"item-details\">\n                                <h2 className=\"item-name\">{item.name}</h2>\n                                <p className=\"item-price\">가격: {item.price}원</p>\n                            </div>\n                        </div>\n                    </Link>\n                ))}\n            </div>\n            <button className=\"scrollToTopButton\" onClick={scrollToTop}>\n                위로\n            </button>\n\n            {isLoading && <p>Loading...</p>}\n        </section>\n    );\n};\n\nexport default ItemLayOut;\n","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/components/Admin.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/payment/TitleLayout.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/payment/ItemlistCart.tsx",["509","510","511","512"],[],"import React, {useEffect, useState} from 'react';\nimport \"../../styles/paymentStyles/ItemlistCart.css\"\nimport cart, {CartList} from \"./Cart\";\nimport axios from \"axios\";\nimport {useNavigate} from \"react-router-dom\";\n\ninterface CartListProps {\n    carts: CartList[];\n    setFlag: React.Dispatch<React.SetStateAction<boolean>>;\n    rflag: boolean;\n}\n\nconst ItemlistCart: React.FC<CartListProps > = ({carts ,setFlag, rflag }) => {\n    const history = useNavigate();\n    const handleItemcount = async (cartid: number, itemcount: number, flag:number, price:number)  => {\n        // async, await 사용이유 :\n        await axios.put(`/cart`, null, {\n            params:{\n                cartid: cartid,\n                itemcount: itemcount,\n                flag: flag,\n                price: price,\n            }\n        })\n            .then(response => {\n                console.log(response.data);\n                // window.location.href = \"/cart\";\n                history(\"/cart\");\n                setFlag(!rflag);\n            })\n            .catch(error => {\n                if (error.response.status === 423) {\n                    sessionStorage.clear();\n                    alert(\"사용자를 찾지 못했습니다. 로그인 상태를 확인해주세요.\");\n                    history(\"/login\");\n                }\n                console.log(error);\n            });\n    }\n\n    return (\n        <div className=\"item_cart\">\n            <div className=\"list_table_wrap\">\n                <table className=\"itemlist_table\" border={1}>\n                    <caption>\n                        <span className=\"texttext\">\n                        상품 이미지, 상품명, 수량, 가격 정보 및 선택 기능, 삭제 기능을 제공하는 표\n                        </span>\n                    </caption>\n\n                    <thead className=\"itemlist_thead\">\n                    <tr>\n                        <th scope=\"col\" className=\"cartlist_select\">\n                            <span className=\"input_check\">선택</span>\n                        </th>\n                        <th scope=\"col\" className=\"itemimg\">\n                            <span className=\"img_item\">사진</span>\n                        </th>\n                        <th scope=\"col\" className=\"itemTitle\">\n                            <span className=\"itemTitle_text\">상품명</span>\n                        </th>\n                        <th scope=\"col\" className=\"item_count\">\n                            <span className=\"count\">수량</span>\n                        </th>\n                        <th scope=\"col\" className=\"pay\">\n                            <span className=\"price\">금액</span>\n                        </th>\n                        <th scope=\"col\" className=\"list_delete\">\n                            <span className=\"delete_thead\">삭제</span>\n                        </th>\n                    </tr>\n                    </thead>\n\n                    <tbody className=\"itemlist_tbody\">\n\n                    {carts.map((cart) => (\n                        <tr key={cart.cartid} className=\"selected list_main\">\n                            <td className=\"cartlist_select\">\n                                <input type=\"checkbox\" id=\"{itemname}\" title=\"상품 선택\" className=\"input_check_checked\"/>\n                            </td>\n                            <td className=\"itemimg\">\n                                <img src={cart.image_path} alt=\"\" className=\"img_item\"\n                                />\n                            </td>\n                            <td className=\"itemTitle\">\n                                    <span  title={cart.name} className=\"itemTitle_text\">{cart.name}\n                                    </span>\n                            </td>\n                            {/* 수량변경 버튼 */}\n                            <td title=\"수량변경\" className=\"item_count\">\n                                <button\n                                    className=\"decrement\"\n                                    onClick={() => handleItemcount(cart.cartid, cart.itemcount, -1, cart.price)}\n                                    disabled={cart.itemcount === 1} // 수량이 1이면 버튼 비활성화\n                                >\n                                    -\n                                </button>\n                                <span className=\"count\">{cart.itemcount}</span>\n                                <button\n                                    className=\"increment\"\n                                    onClick={() => handleItemcount(cart.cartid, cart.itemcount, +1 ,cart.price)}\n                                    disabled={cart.itemcount === 20} // 수량이 100이면 버튼 비활성화\n                                >\n                                    +\n                                </button>\n                            </td>\n                            <td className=\"price_box\">\n                                <div className=\"price\">\n                                    {(cart.price*cart.itemcount)}\n                                </div>\n                            </td>\n                            <td className=\"list_delete\">\n                                <a href=\"#\" role=\"button\" className=\"btn_delete_one\"\n                                ><span className=\"delete_one\">삭제</span></a\n                                >\n                            </td>\n                        </tr>\n                    ))}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    );\n};\n\nexport default ItemlistCart;","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/payment/ChargeBox.tsx",["513","514","515"],[],"import React, {useEffect, useState} from 'react';\nimport \"../../styles/paymentStyles/ChargeBox.css\";\nimport {useMatch} from \"react-router-dom\";\nimport {OrderList} from \"./Order\";\nimport {CartList} from \"./Cart\";\n\ninterface CartListProps {\n    carts?: CartList[];\n}\n\nconst ChargeBox: React.FC<CartListProps > = ({carts}) => {\n    const matchCart = useMatch(\"/cart\")\n    const matchOrder = useMatch(\"/order\");\n\n    let orderOrPay;\n    let agreetag;\n\n    if(matchCart) {\n        orderOrPay = '주문하기';\n        agreetag = <label className={'label_agree'}>CAMPERBLIC 이용약관에 동의합니다.</label>;\n    } else if (matchOrder) {\n        orderOrPay = '결제하기';\n        agreetag = <div></div>;\n    }\n\n    const totalPrice = carts?.reduce((accumulator, currentItem) => {\n        const itemTotal = currentItem.itemcount * currentItem.price;\n        return accumulator + itemTotal;\n    }, 0);\n\n    return (\n        <div className=\"charge_section\">\n            <div className=\"charge_area\">\n                <div className=\"count_area\">\n                    <div className=\"count_item\">\n                        <span className={'title'}>선택 상품 수</span>\n                        <span className={'data positive'}>1개</span>\n                    </div>\n                </div>\n                <div className={'coupon_area'}>\n                    <div className={'usestatus_coupon'}>\n                        <span className={'title'}>쿠폰 사용여부</span>\n                        <span className={'data positive'}>미적용</span>\n                    </div>\n                </div>\n                <hr></hr>\n                <div className={'discount_area'}>\n                    <span className={'title'}>총 할인금액</span>\n                    <span className={'discount_cost'}>0원</span>\n                </div>\n                <div className={'total_area'}>\n                    <span className={'title'}>총 결제금액</span>\n                    <div className={'total_price'}>\n                        <strong className={'charge'}>{totalPrice}</strong>\n                    </div>\n                </div>\n                <div className={'vat_info'}>\n                    <span className={'text_vat'}>(부가세 포함)</span>\n                </div>\n            </div>\n            <div className={'agree_area'}>\n                <input type={\"checkbox\"} id={'agree_terms'} className={'input_agree'}/>\n                {agreetag}\n            </div>\n            <a href={'/order'} target={'_self'} rel={'noreferrer'} className={'link_pay disabled'}>\n                {orderOrPay}\n            </a>\n        </div>\n    );\n};\n\nexport default ChargeBox;","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/community/BoardLayOut.tsx",["516","517"],[],"import React, { useState, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { Posting } from '../../types';\nimport '../../styles/communityStyles/boardLayout.css';\nimport axios from 'axios';\n\ninterface BoardLayOutProps {\n    postings: Posting[];\n    category: string;\n}\n\nconst BoardLayOut: React.FC<BoardLayOutProps> = ({ postings, category }) => {\n    const navigate = useNavigate();\n    const [visiblePostCount, setVisiblePostCount] = useState(15);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [addIndex, setAddIndex] = useState(0);\n    const [isLeftButtonActive, setIsLeftButtonActive] = useState(false);\n    const [isRightButtonActive, setIsRightButtonActive] = useState(false);\n    const sessionUserId = sessionStorage.getItem(\"userId\");\n\n    const handleTitleClick = async (id: number, category: string) => {\n        try {\n            await increaseViewCount(id, category);\n            navigate(`/boarddetail/${category}/${id}`);\n        } catch (error) {\n            console.error('조회수 증가 중 오류 발생:', error);\n        }\n    };\n\n    const increaseViewCount = async (id: number, category: string) => {\n        await axios.put(`/increase-view`, null, {\n            params: {\n                category: encodeURIComponent(category),\n                id: id,\n            },\n        });\n    };\n\n    const handleWriteClick = (category: string) => {\n        navigate(`/writepost/${category}`);\n    };\n\n    const handlePageClick = (page: number) => {\n        setCurrentPage(page);\n    };\n\n    useEffect(() => {\n        if (postings.length > 150) {\n            if (currentPage > Math.floor(postings.length / visiblePostCount / 10) * 10) {\n                setIsLeftButtonActive(true);\n                setIsRightButtonActive(false);\n            } else {\n                setIsLeftButtonActive(false);\n                setIsRightButtonActive(true);\n            }\n        } else {\n            setIsLeftButtonActive(false);\n            setIsRightButtonActive(false);\n        }\n    }, [currentPage, postings.length, visiblePostCount]);\n\n    const start = (currentPage - 1) * visiblePostCount;\n    const end = start + visiblePostCount;\n    const visiblePostings = postings.slice(start, end);\n\n    const maxLiCount = 10;\n    const pageButtons = [];\n\n    const leftBtnClick = () => {\n        setAddIndex(Math.floor(currentPage / maxLiCount) * 10 - maxLiCount);\n        setCurrentPage(Math.floor(currentPage / maxLiCount) + 9);\n    };\n\n    const rightBtnClick = () => {\n        setAddIndex(Math.ceil(currentPage / maxLiCount) * maxLiCount);\n        setCurrentPage(Math.floor(currentPage / maxLiCount) + 11);\n    };\n\n    for (let index = 0; index < maxLiCount; index++) {\n        const pageNumber = index + 1 + addIndex;\n        const pageButton = (\n            <li key={pageNumber}>\n                <button\n                    className={currentPage === pageNumber ? 'active' : ''}\n                    onClick={() => handlePageClick(pageNumber)}\n                >\n                    {pageNumber}\n                </button>\n            </li>\n        );\n        pageButtons.push(pageButton);\n        if (pageNumber * visiblePostCount >= postings.length) break;\n    }\n\n    return (\n        <section className=\"boardLayOut\">\n            <div className=\"topSide\"></div>\n            <div className=\"innerWrap\">\n                <div className=\"tableContainer\">\n                    <table>\n                        <colgroup>\n                            <col style={{ width: '10%' }} />\n                            <col style={{ width: '15%' }} />\n                            <col style={{ width: '45%' }} />\n                            <col style={{ width: '20%' }} />\n                            <col style={{ width: '10%' }} />\n                        </colgroup>\n                        <thead>\n                        <tr>\n                            <th>글 번호</th>\n                            <th>작성자</th>\n                            <th>제목</th>\n                            <th>작성일</th>\n                            <th>조회수</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {visiblePostings.map((posting) => (\n                            <tr key={posting.id}>\n                                <td>{posting.id}</td>\n                                <td>{posting.name}</td>\n                                <td\n                                    className=\"linkTd\"\n                                    onClick={() => handleTitleClick(posting.id, category)}\n                                >\n                                    {posting.title}\n                                </td>\n                                <td>{posting.createdate}</td>\n                                <td>{posting.views}</td>\n                            </tr>\n                        ))}\n                        </tbody>\n                    </table>\n                </div>\n\n                <nav className=\"pageNationWrap\">\n                    <button\n                        disabled={!isLeftButtonActive}\n                        onClick={leftBtnClick}\n                        className={isLeftButtonActive ? 'active' : ''}\n                    >\n                        이전\n                    </button>\n                    <ul className=\"pageBtnUl\">{pageButtons}</ul>\n                    <button\n                        disabled={!isRightButtonActive}\n                        onClick={rightBtnClick}\n                        className={isRightButtonActive ? 'active' : ''}\n                    >\n                        다음\n                    </button>\n                    { sessionUserId != null && <button\n                        className=\"writeBtn\"\n                        onClick={() => handleWriteClick(category)}\n                    >\n                        글쓰기\n                    </button>}\n                </nav>\n            </div>\n            {/*<div className=\"bottomSide\">*/}\n            {/*    <h3>지금 핫한 캠핑 아이템!</h3>*/}\n            {/*    <ul className=\"bottomItemContainer\">*/}\n            {/*        <li className=\"bottomItem\"*/}\n            {/*            onClick={() => navigate(`/${category}`)}*/}\n            {/*            style={{*/}\n            {/*                background: 'url(\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSy0DbM7B5nS_0tgx9K6YHxLI9loVAYh6y8kqZnAEyO&s\") no-repeat center/cover',*/}\n            {/*            }}*/}\n            {/*        ></li>*/}\n            {/*        <li className=\"bottomItem\"*/}\n            {/*            onClick={() => navigate(`/${category}`)}*/}\n            {/*            style={{*/}\n            {/*                background: 'url(\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSy0DbM7B5nS_0tgx9K6YHxLI9loVAYh6y8kqZnAEyO&s\") no-repeat center/cover',*/}\n            {/*            }}*/}\n            {/*        ></li>*/}\n            {/*        <li className=\"bottomItem\"*/}\n            {/*            onClick={() => navigate(`/${category}`)}*/}\n            {/*            style={{*/}\n            {/*                background: 'url(\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSy0DbM7B5nS_0tgx9K6YHxLI9loVAYh6y8kqZnAEyO&s\") no-repeat center/cover',*/}\n            {/*            }}*/}\n            {/*        ></li>*/}\n            {/*        <li className=\"bottomItem\"*/}\n            {/*            onClick={() => navigate(`/${category}`)}*/}\n            {/*            style={{*/}\n            {/*                background: 'url(\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSy0DbM7B5nS_0tgx9K6YHxLI9loVAYh6y8kqZnAEyO&s\") no-repeat center/cover',*/}\n            {/*            }}*/}\n            {/*        ></li>*/}\n            {/*    </ul>*/}\n            {/*</div>*/}\n        </section>\n    );\n};\n\nexport default BoardLayOut;",[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/login/SignUp.tsx",["518"],[],"import React, {useState} from 'react';\r\nimport {useNavigate} from 'react-router-dom';\r\nimport '../../styles/loginStyles/SignUp.css';\r\nimport axios from \"axios\";\r\nimport {text} from \"stream/consumers\";\r\n\r\ninterface SignUpForm {\r\n    userid: string,\r\n    password: string,\r\n    name: string,\r\n    email: string,\r\n    phone: string,\r\n\r\n    [key: string]: string;\r\n}\r\n\r\nconst SignUp = () => {\r\n    const history = useNavigate();\r\n    const [signUpForm, setSignUpForm] =\r\n        useState<SignUpForm>({\r\n            userid: '',\r\n            password: '',\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n        });\r\n\r\n    const userIdRegex = /^(?!.*[<>])(?=.*\\d)(?=.*[a-z])(?!.*\\badmin\\b)[^<>]{5,15}$/;\r\n    const passwordRegex = /^(?!.*[<>])(?!.*\\badmin\\b)(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,20}$/;\r\n    const phoneNumberRegex = /^(?!.*[<>])(?!.*\\badmin\\b)\\d{10,11}$/;\r\n    const emailRegex = /^(?!.*[<>])(?!.*\\badmin\\b)[a-zA-Z0-9]{3,}@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z]+)\\.([a-zA-Z]){1,3}$/;\r\n    const userNameRegex = /^(?!.*[<>])(?!.*\\badmin\\b)([a-zA-Z]+|[가-힣]+){2,15}$/;\r\n\r\n    const [validationStates, setValidationStates] = useState({\r\n        name: \"black\",\r\n        userid: \"black\",\r\n        email: \"black\",\r\n        phone: \"black\",\r\n        password: \"black\",\r\n    });\r\n\r\n    const validateCheck = (name: string, value: string) => {\r\n        switch (name) {\r\n            case 'name':\r\n                return userNameRegex.test(value);\r\n            case 'userid':\r\n                return userIdRegex.test(value);\r\n            case 'password':\r\n                return passwordRegex.test(value);\r\n            case 'email':\r\n                return emailRegex.test(value);\r\n            case 'phone':\r\n                return phoneNumberRegex.test(value);\r\n        }\r\n    };\r\n\r\n    const validateField = (\r\n        fieldName: string,\r\n        fieldValue: string\r\n    ) => {\r\n        if (!validateCheck(fieldName, fieldValue)) {\r\n            setValidationStates(prevStates => ({\r\n                ...prevStates,\r\n                [fieldName]: \"red\"\r\n            }));\r\n        } else {\r\n            setValidationStates(prevStates => ({\r\n                ...prevStates,\r\n                [fieldName]: \"green\"\r\n            }));\r\n        }\r\n    };\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSignUpForm({...signUpForm, [e.target.name]: e.target.value});\r\n        validateField(e.target.name, e.target.value);\r\n    };\r\n    const validateForm = () => {\r\n        const fieldsToValidate = [\r\n            {fieldName: 'name', errorMessage: '올바른 이름 형식이 아닙니다.'},\r\n            {fieldName: 'userid', errorMessage: '올바른 아이디 형식이 아닙니다.'},\r\n            {fieldName: 'password', errorMessage: '올바른 비밀번호 형식이 아닙니다.'},\r\n            {fieldName: 'email', errorMessage: '올바른 이메일 형식이 아닙니다.'},\r\n            {fieldName: 'phone', errorMessage: '올바른 전화번호 형식이 아닙니다.'}\r\n        ];\r\n\r\n        for (const field of fieldsToValidate) {\r\n            if (!validateCheck(field.fieldName, signUpForm[field.fieldName])) {\r\n                alert(field.errorMessage);\r\n                document.getElementById(field.fieldName)?.focus();\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n\r\n    const handlecheckPw= () => {\r\n        const passwordInput = document.getElementById(\"pw\") as HTMLInputElement;\r\n        if(passwordInput.type === \"text\" ){\r\n            passwordInput.type = \"password\"; // 타입 변경\r\n        }else{\r\n            passwordInput.type = \"text\";\r\n        }\r\n    }\r\n\r\n    const SigupBtn = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        // 입력값 검증\r\n        if (!validateForm()) {\r\n            return;\r\n        }\r\n        axios.post('/signup', signUpForm)\r\n            .then((response) => {\r\n                // 회원가입 성공 시 로그인으로 이동\r\n                if (response.status === 200) {\r\n                    history('/login'); // 로그인 페이지\r\n                    alert(\"회원 가입 성공 \");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.error(error);\r\n                if(error.response.status=== 500){\r\n                    alert(error.response.data);\r\n                }else if(error.response.status === 409){\r\n                    alert(error.response.data);\r\n                }else {\r\n                    console.log(error);\r\n                    // window.location.href = '/signup';\r\n                    alert(\"회원 가입 실패 \");\r\n                }\r\n            });\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <div className={\"signupMainDiv\"}>\r\n                <div className={\"signupMainDivForm\"}>\r\n                    <h1>회원가입</h1>\r\n                    <form onSubmit={SigupBtn}>\r\n                        <table className={\"signupMainForm\"}>\r\n                            <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    <label htmlFor={'name'}>이름</label>\r\n                                    <div>\r\n                                        <input type=\"text\" placeholder=\"이름을 입력하세요\" id={\"name\"} name={\"name\"}\r\n                                               onChange={handleInputChange}/>\r\n                                    </div>\r\n                                    <p id={\"pTag\"} style={{color: validationStates.name}}>\"한글 또는 영어로 최소 2자이상 최대 15자 까지입니다.\"</p>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    <label htmlFor={'id'}>아이디</label>\r\n                                    <div>\r\n                                        <input type=\"text\" placeholder=\"아이디를 입력하세요\" id={\"id\"} name={\"userid\"}\r\n                                               onChange={handleInputChange}/>\r\n                                    </div>\r\n                                    <p id={\"pTag\"}  style={{color: validationStates.userid}}>\"소문자,숫자 최소 한 번 이상 대문자 포함 가능 5자 이상 최대\r\n                                        15자리\r\n                                        까지입니다.\"</p>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    <label htmlFor={'pw'}>비밀번호</label>\r\n                                    <div className={\"signUpPwDiv\"}>\r\n                                        <input type=\"password\" placeholder=\"비밀번호를 입력하세요\" id={\"pw\"} name={\"password\"}\r\n                                               onChange={handleInputChange}/>\r\n                                        <span onClick={handlecheckPw}>확인</span>\r\n                                    </div>\r\n                                    <p  id={\"pTag\"} style={{color: validationStates.password}}>\"영문 대소문자,숫자,특수문자(@,$,! %,*,?,&) 하나이상\r\n                                        포함 8자\r\n                                        이상 20자 이하입니다.\"</p>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    <label htmlFor={'email'}>이메일</label>\r\n                                    <div>\r\n                                        <input type=\"text\" placeholder=\"이메일을 입력하세요\" id={\"email\"} name={\"email\"}\r\n                                               onChange={handleInputChange}/>\r\n                                    </div>\r\n                                    <p id={\"pTag\"}  style={{color: validationStates.email}}>\"ex) \"test@gamil.com\" \"영문 대소문자, 숫자 3자\r\n                                        이상\"@,\r\n                                        이메일은 비밀번호\r\n                                        찾기에 사용됩니다.\"</p>\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    <label htmlFor={'phone'}>휴대전화번호</label>\r\n                                    <div>\r\n                                        <input type=\"text\" placeholder=\"휴대전화번호를 입력하세요\" id={\"phone\"} name={\"phone\"}\r\n                                               onChange={handleInputChange}/>\r\n                                    </div>\r\n                                    <p id={\"pTag\"} style={{color: validationStates.phone}}>\"ex) \"01011112222\" 숫자만 입력해주세요 10자리 이상 최대\r\n                                        11자리\r\n                                        까지입니다.\"</p>\r\n                                </td>\r\n                            </tr>\r\n                            </tbody>\r\n                        </table>\r\n                        <button type={\"submit\"} className={\"signupBtn\"}>회원가입</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default SignUp;","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/community/BoardWrite.tsx",["519","520"],[],"import React, { useState, useEffect } from 'react';\nimport { useParams, useLocation, useNavigate } from 'react-router-dom';\nimport '../../styles/communityStyles/boardWrite.css';\nimport axios from 'axios';\n\nconst BoardWrite: React.FC = () => {\n    const { category } = useParams<{ category: string }>();\n    const location = useLocation();\n    const searchParams = new URLSearchParams(location.search);\n    const editMode = searchParams.get('edit') === 'true';\n    const postId = searchParams.get('id');\n    const [title, setTitle] = useState('');\n    const [name, setName] = useState('');\n    const [content, setContent] = useState('');\n    const navigate = useNavigate();\n    const sessionUserId:any = sessionStorage.getItem(\"userId\");\n\n    useEffect(() => {\n        if (editMode && postId) {\n            axios\n                .get(`/boarddetail/${category}/${postId}`)\n                .then((response) => {\n                    const postingDetail = response.data;\n                    setTitle(postingDetail.title);\n                    setName(postingDetail.name);\n                    setContent(postingDetail.content);\n                })\n                .catch((error) => {\n                    console.log('게시글을 가져오는 데 실패했습니다:', error);\n                });\n        }\n    }, [category, editMode, postId]);\n\n    const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.target.value);\n    };\n\n    const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (!editMode) {\n            setName(e.target.value);\n        }\n    };\n\n    const handleContentChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        setContent(e.target.value);\n    };\n\n    const postData = {\n        title: title,\n        name: sessionUserId,\n        content: content,\n    };\n\n    const handleFormSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n\n        if (editMode && postId) {\n            // 수정 모드인 경우 게시글 업데이트 로직 수행\n            axios\n                .put(`/edit/${category}?id=${postId}`, postData)\n                .then((response) => {\n                    alert('게시글이 성공적으로 업데이트되었습니다.');\n                    navigate(`/boarddetail/${category}/${postId}`);\n                })\n                .catch((error) => {\n                    alert('게시글 업데이트에 실패했습니다:' + error);\n                });\n        } else {\n            // 새로운 게시글 등록 로직 수행\n            axios\n                .post(`/write/${category}`, postData)\n                .then((response) => {\n                    alert('게시글이 성공적으로 등록되었습니다.');\n                    // const newPostId = response.data.postId;\n                    navigate(`/boarddetail/${category}/${response.data}`);\n                    // navigate(`/${category}`);\n                })\n                .catch((error) => {\n                    alert('게시글 등록에 실패했습니다:' + error);\n                });\n        }\n    };\n\n    const handleCancel = () => {\n        navigate(-1);\n    };\n    return (\n        <section className=\"writeOutterWrap\">\n            <div className=\"writeDecoTop\"></div>\n            <div className=\"writeWrap\">\n                <div className=\"writeFormWrap\">\n                    <form className=\"writeForm\" onSubmit={handleFormSubmit}>\n                        <div className=\"formGroup\">\n                            <label htmlFor=\"title\">제목</label>\n                            <input\n                                type=\"text\"\n                                id=\"title\"\n                                value={title}\n                                onChange={handleTitleChange}\n                                placeholder=\"제목을 입력하세요.\"\n                                required\n                            />\n                        </div>\n                        <div className=\"formGroup\">\n                            <label htmlFor=\"name\">작성자</label>\n                            <input\n                                type=\"text\"\n                                id=\"name\"\n                                value={sessionUserId}\n                                placeholder=\"작성자를 입력하세요.\"\n                                disabled={editMode} // Disable the input field in edit mode\n                                readOnly\n                            />\n                        </div>\n                        <div className=\"formGroup\">\n                            <label htmlFor=\"content\">내용</label>\n                            <textarea\n                                id=\"content\"\n                                value={content}\n                                onChange={handleContentChange}\n                                placeholder=\"내용을 입력하세요.\"\n                                required\n                            ></textarea>\n                        </div>\n                        <div className=\"buttonGroup\">\n                            <button type=\"submit\">{editMode ? '수정' : '등록'}</button>\n                            <button type=\"button\" onClick={handleCancel}>\n                                취소\n                            </button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n            <div className=\"writeDecoTop\"></div>\n        </section>\n    );\n};\n\nexport default BoardWrite;","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/community/ReviewCamping.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/community/component/ReplyInputContainer.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/community/component/EditDeleteButtons.tsx",["521"],[],"import React from \"react\";\nimport ReplyInputContainer from \"./ReplyInputContainer\";\n\nconst EditDeleteButtons: React.FC<{ handleEdit: () => void; handleDelete: () => void }> = ({\n                                                                                               handleEdit,\n                                                                                               handleDelete,\n                                                                                           }) => {\n    return (\n        <div className=\"button-group\">\n            <span className=\"button\" onClick={handleEdit}>수정</span>\n            <span className=\"button\" onClick={handleDelete}>삭제</span>\n        </div>\n    );\n};\n\nexport default EditDeleteButtons;","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/community/component/CommentItem.tsx",["522","523","524"],[],"import React, {useState} from 'react';\nimport ReplyInputContainer from './ReplyInputContainer';\nimport { CommentOne } from '../../../types';\nimport axios from \"axios\";\n\nconst sessionUserId = sessionStorage.getItem(\"userId\");\nconst idValidation = (id: string):boolean => {\n    if(sessionUserId == \"admin\" || sessionUserId == id) return true;\n    else return false;\n}\n\nfunction handleReplyEdit() {\n    axios\n        .put('/delete-replies', {\n            params: {\n\n            },\n        })\n        .then((response) => {\n            alert(response.data);\n        })\n        .catch((error) => {\n            alert('게시글 삭제에 실패했습니다:' + error);\n        });\n}\n\nconst handleReplyDelete = (category: any, id: number) => {\n    axios\n        .delete('/delete-replies', {\n            params: {\n                category,\n                id\n            },\n        })\n        .then((response) => {\n            alert(response.data);\n            window.location.reload();\n        })\n        .catch((error) => {\n            alert('댓글 삭제에 실패했습니다:' + error);\n        });\n};\n\nconst CommentItem: React.FC<{\n    category: any;\n    comment: CommentOne;\n    isReplyVisible: boolean;\n    replyInputCommentId: number | null;\n    commentInput: string;\n    handleCommentInputChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n    handleReCommentInput: (commentId: number) => void;\n    handleReply: (commentId: number) => void;\n    handleReplyCommentSubmit: (commentId: number, commentInput: string, commentTagName: string) => void;\n    isReplyInputVisible: boolean;\n    setReplyInputVisible: React.Dispatch<React.SetStateAction<boolean>>;\n    replyList: CommentOne[];\n    setReplyList: React.Dispatch<React.SetStateAction<{ [commentId: number]: CommentOne[] }>>; // 수정된 부분\n}> = ({\n          category,\n          comment,\n          isReplyVisible,\n          replyInputCommentId,\n          commentInput,\n          handleCommentInputChange,\n          handleReCommentInput,\n          handleReply,\n          handleReplyCommentSubmit,\n          isReplyInputVisible,\n          setReplyInputVisible,\n          replyList,\n          setReplyList,\n      }) => {\n\n\n\n    const renderReplies = (replies: CommentOne[]) => {\n        return replies.map((reply) => (\n            <ReplyItem\n                category={category}\n                key={reply.id}\n                comment={reply}\n                handleReCommentInput={handleReCommentInput}\n                handleReplyEdit={handleReplyEdit}\n                handleReplyDelete={() => handleReplyDelete(category, reply.id)}\n            />\n        ));\n    };\n\n    return (\n        <li className=\"replyOne\" key={comment.id}>\n            <p>{comment.name}</p>\n            <p>{comment.createdate}</p>\n            <p>{comment.content}</p>\n            <div className=\"replyButtons\">\n                <div>\n                    {/*<span>{comment.like_count}</span>*/}\n                    {/*<span>{comment.dislike_count}</span>*/}\n                    {sessionUserId != null && <span className=\"replyButton\" onClick={() => handleReCommentInput(comment.id)}>답글</span>}\n                </div>\n                <div>\n                    {/*<span className=\"editButton\" onClick={handleReplyEdit}>수정</span>*/}\n                    {idValidation(comment.name) && <span className=\"deleteButton\" onClick={() => handleReplyDelete(category, comment.id)}>삭제</span>}\n                </div>\n            </div>\n            {comment.reply_count > 0 &&\n                <span className=\"replyCountButton\" onClick={() => handleReply(comment.id)}>\n                    {isReplyVisible ? '답글 숨기기' : `답글 ${comment.reply_count}개`}\n                </span>\n            }\n\n            {replyInputCommentId === comment.id && (\n                <ReplyInputContainer\n                    commentInput={commentInput}\n                    handleCommentInputChange={handleCommentInputChange}\n                    handleCommentSubmit={() => handleReplyCommentSubmit(comment.id, commentInput, comment.tagname)}\n                    isVisible={isReplyInputVisible}\n                    setReplyInputVisible={setReplyInputVisible}\n                />\n            )}\n            {isReplyVisible && <ul className=\"replyList\">{renderReplies(replyList)}</ul>}\n        </li>\n    );\n};\n\nconst ReplyItem: React.FC<{\n    category: any;\n    comment: CommentOne;\n    handleReCommentInput: (commentId: number) => void;\n    handleReplyEdit: () => void;\n    handleReplyDelete: (category: any, id: number) => void;\n}> = ({ category, comment, handleReCommentInput, handleReplyEdit, handleReplyDelete }) => {\n\n    return (\n        <li className=\"replyOne rere\" key={comment.id}>\n            <p>{comment.name}</p>\n            <p>{comment.createdate}</p>\n            <p>{comment.content}</p>\n            <div className=\"replyButtons\">\n                <div>\n                    {/*<span>{comment.like_count}</span>*/}\n                    {/*<span>{comment.dislike_count}</span>*/}\n                    {/*{sessionUserId != null && <span className=\"replyButton\" onClick={() => handleReCommentInput(comment.id)}>답글</span>}*/}\n                </div>\n                <div>\n                    {/*<span className=\"editButton\" onClick={handleReplyEdit}>수정</span>*/}\n                    {idValidation(comment.name) && <span className=\"deleteButton\" onClick={() => {\n                        handleReplyDelete(category, comment.id);\n                    }}>삭제</span>}\n                </div>\n            </div>\n        </li>\n    );\n};\n\nexport default CommentItem;","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/item/components/AddProductModal.tsx",[],[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/AdminMemberLayout.tsx",["525","526","527","528"],[],"import React, {useEffect, useState} from 'react';\r\nimport {Item, Member, Posting} from \"../../types\";\r\nimport '../../styles/adminStyles/AdminMemberLayout.css';\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport AdminStockUpdate from \"./components/adminstock/AdminStockUpdate\";\r\nimport AdminMemberDetail from \"./AdminMemberDetail\";\r\n\r\ninterface MemberLayOut {\r\n    member: Member[];\r\n}\r\n\r\nconst AdminMemberLayout:React.FC<MemberLayOut> = ({member}) => {\r\n    const [selectedMember, setSelectedMember] = useState<Member | null>(null);\r\n    const handleOpenModal = (member: Member) => {\r\n        setSelectedMember(member);\r\n    };\r\n\r\n    const handleCloseModal = () => {\r\n        setSelectedMember(null);\r\n    };\r\n\r\n    const handleStockUpdate = (product:Member) => {\r\n        // 변경된 재고 수량 값을 이용하여 필요한 로직 수행\r\n        // 예: API 호출 등\r\n    };\r\n\r\n\r\n    // 검색어 상태 관리\r\n    const [searchText, setSearchText] = useState('');\r\n    const [searchCategory,setSearchCategory] = useState('');\r\n    // 검색 결과 상태 관리\r\n    const [searchedMembers, setSearchedMembers] = useState<Member[]>([]);\r\n\r\n    // 검색어 입력 시 실행되는 함수\r\n    const handleSearchInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSearchText(event.target.value);\r\n    };\r\n\r\n    // 카테고리 선택 시 실행되는 함수\r\n    const handleCategoryChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n        setSearchCategory(event.target.value);\r\n    };\r\n\r\n    const handleSearch = () => {\r\n        // 검색어가 있을 경우에만 서버로 요청\r\n        if (searchText.trim() !== '') {\r\n            axios\r\n                .get(`/adminmember/search/${searchCategory}`, {\r\n                    params: {\r\n                        searchText: searchText,\r\n                    },\r\n                })\r\n                .then((response) => {\r\n                    // 검색 결과를 받아온 후 처리\r\n                    const searchedMembers = response.data;\r\n                    setSearchedMembers(searchedMembers);\r\n                })\r\n                .catch((error) => {\r\n                    console.log(error);\r\n                });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // 검색 결과가 변경될 때마다 호출되는 로직\r\n        if (searchedMembers.length > 0) {\r\n            // 검색 결과가 있을 경우 추가 작업 수행 가능\r\n            console.log(searchedMembers);\r\n        }\r\n    }, [searchedMembers]);\r\n\r\n    return (\r\n        <section className='homeWidgets'>\r\n            <div className=\"search-bar_member\">\r\n            <select className=\"admincategory_member_layout\"value={searchCategory} onChange={handleCategoryChange}>\r\n                <option value=\"\">카테고리 선택</option>\r\n                <option value=\"idSearch\">ID</option>\r\n                <option value=\"nameSearch\">이름</option>\r\n                <option value=\"emailSearch\">이메일</option>\r\n                <option value=\"phoneSearch\">전화번호</option>\r\n            </select>\r\n\r\n                <input type=\"text\" value={searchText} onChange={handleSearchInputChange} placeholder=\"제목검색\" />\r\n                <button onClick={handleSearch}>검색</button>\r\n            </div>\r\n            <table className='widgettable'>\r\n                <thead>\r\n                <tr className='widgetmember1'>\r\n                    <th>id</th>\r\n                    <th>이름</th>\r\n                    <th>전화번호</th>\r\n                    <th>이메일</th>\r\n                    <th>상세보기</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {(searchedMembers.length > 0 ? searchedMembers : member).map((item) => (\r\n\r\n                <tr className='widgetmember2'>\r\n                    <td>{item.userid}</td>\r\n                    <td>{item.name}</td>\r\n                    <td>{item.phone}</td>\r\n                    <td>{item.email}</td>\r\n                    <td>\r\n                        <button className='widgetbtn' onClick={() => handleOpenModal(item)}>detail</button>\r\n                    </td>\r\n                </tr>\r\n                ))}\r\n                </tbody>\r\n            </table>\r\n            {selectedMember && (\r\n                <AdminMemberDetail\r\n                    member={selectedMember}\r\n                    isOpen={true}\r\n                    closeModal={handleCloseModal}\r\n                    updateStock={handleStockUpdate}\r\n                />\r\n            )}\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default AdminMemberLayout;","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/adminboard/AdminBoardCampStory.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/adminboard/AdminBoardFreeboard.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/adminboard/AdminBoardReview.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/adminboard/AdminBoardGatherCamper.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardGraph.tsx",["529"],[],"import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Barchart from './Barchart';\nimport { GraphDTO } from '../../../../types';\n\ninterface GraphDataItem {\n    date: string;\n    value: number;\n}\n\nconst AdminDashboardGraph = () => {\n    const [graphData, setGraphData] = useState<GraphDataItem[]>([]);\n    const [graphDTO, setGraphDTO] = useState<GraphDTO | null>(null);\n\n    useEffect(() => {\n        axios\n            .get('/admindashboard/admindashboardchart')\n            .then((response) => {\n                const data: [string, number][] = response.data;\n\n                // 데이터 형식 변환\n                const formattedData: GraphDataItem[] = data.map(([date, value]) => ({\n                    date,\n                    value,\n                }));\n\n                setGraphData(formattedData);\n\n                // 날짜별 매출액 계산\n                const currentDate = new Date().toISOString().slice(0, 10);\n                const filteredData: GraphDTO = {\n                    fourTotalPrice: 0,\n                    threeTotalPrice: 0,\n                    twoTotalPrice: 0,\n                    oneTotalPrice: 0,\n                    currTotalPrice: 0,\n                    totalPriceSum: 0,\n                };\n\n                formattedData.forEach(({ date, value }) => {\n                    const daysAgo = Math.floor(\n                        (new Date(currentDate).getTime() - new Date(date).getTime()) /\n                        (24 * 60 * 60 * 1000)\n                    );\n                    if (daysAgo === 4) {\n                        filteredData.fourTotalPrice += value;\n                    } else if (daysAgo === 3) {\n                        filteredData.threeTotalPrice += value;\n                    } else if (daysAgo === 2) {\n                        filteredData.twoTotalPrice += value;\n                    } else if (daysAgo === 1) {\n                        filteredData.oneTotalPrice += value;\n                    } else if (daysAgo === 0) {\n                        filteredData.currTotalPrice += value;\n                    }\n                });\n\n                // 현재월 총합 계산\n                filteredData.totalPriceSum = formattedData.reduce(\n                    (sum, { value }) => sum + value,\n                    0\n                );\n\n                setGraphDTO(filteredData);\n            })\n            .catch((error) => {\n                console.log(error);\n            });\n    }, []);\n\n    return (\n        <section>\n            {graphDTO ? (\n                <Barchart graphDTO={graphDTO} />\n            ) : (\n                <p>Loading graph data...</p>\n            )}\n        </section>\n    );\n};\n\nexport default AdminDashboardGraph;\n","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardSecond.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardOrder.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardBottom.tsx",["530","531"],[],"import React, { useEffect, useState } from 'react';\nimport AdminDashboardStock from './AdminDashboardStock';\nimport AdminDashboardBoard from './AdminDashboardBoard';\nimport '../../../../styles/adminStyles/admindashboard/AdminDashboardBottom.css';\nimport { Item, Posting } from \"../../../../types\";\n\ninterface Props {\n    items: Item[];\n    postings: Posting[];\n}\n\nconst AdminDashboardBottom: React.FC<Props> = ({ items, postings }) => {\n\n    return (\n        <section className='admindashboard_bottom'>\n            <AdminDashboardStock items={items} />\n            <AdminDashboardBoard postings={postings} />\n        </section>\n    );\n};\n\nexport default AdminDashboardBottom;\n","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/adminstock/AdminStockCook.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/adminstock/AdminStockTent.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/adminstock/AdminStockMat.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/adminstock/AdminStockEtc.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/adminstock/AdminStockChair.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/AdminMemberDetail.tsx",["532","533","534"],[],"import React, { useEffect, useState } from 'react';\r\nimport Modal from 'react-modal';\r\nimport { Member } from '../../types';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport '../../styles/adminStyles/AdminMemberDetail.css';\r\n\r\nModal.setAppElement('#root');\r\n\r\ninterface MemberdetailProps {\r\n    member: Member;\r\n    isOpen: boolean;\r\n    closeModal: () => void;\r\n    updateStock: (product: Member) => void;\r\n}\r\n\r\nconst AdminMemberDetail: React.FC<MemberdetailProps> = ({\r\n                                                            isOpen,\r\n                                                            closeModal,\r\n                                                            member,\r\n                                                        }) => {\r\n    const history = useNavigate();\r\n\r\n    const handleCloseModal = () => {\r\n        closeModal(); // 모달 닫기\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            isOpen={isOpen}\r\n            onRequestClose={handleCloseModal} // 모달 닫기 함수 사용\r\n            contentLabel=\"Member Detail Modal\"\r\n            className=\"admindetailmodal_update\"\r\n        >\r\n            <h2 className=\"admindetailmodal_title\">회원 상세 정보</h2>\r\n            <div>\r\n                <p className=\"admindetailmodal_p\">ID: {member.userid}</p>\r\n                <p className=\"admindetailmodal_p\">이름: {member.name}</p>\r\n                <p className=\"admindetailmodal_p\">전화번호: {member.phone}</p>\r\n                <p className=\"admindetailmodal_p\">이메일: {member.email}</p>\r\n                <p className=\"admindetailmodal_p\">주소1: {member.address1}</p>\r\n                <p className=\"admindetailmodal_p\">주소2: {member.address2}</p>\r\n                <p className=\"admindetailmodal_p\">주소3: {member.address3}</p>\r\n                <p className=\"admindetailmodal_p\">주소4: {member.address4}</p>\r\n                <p className=\"admindetailmodal_p\">가입일: {member.createdDate}</p> {/* createDate으로 수정 */}\r\n            </div>\r\n            <button className=\"admindetailmodal_btn\" onClick={handleCloseModal}>\r\n                닫기\r\n            </button>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default AdminMemberDetail;\r\n","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/Barchart.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/adminboard/AdminBoardLayout.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardBoard.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardSecondTime.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardStock.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/adminstock/AdminStockLayout.tsx",["535","536"],[],"import React, {useEffect, useState} from 'react';\r\nimport {Item, Posting} from \"../../../../types\";\r\nimport '../../../../styles/adminStyles/AdminStockLayout.css';\r\nimport AdminStockUpdate from \"./AdminStockUpdate\";\r\nimport axios from \"axios\";\r\ninterface ItemLayOutProps {\r\n    items: Item[];\r\n}\r\nconst AdminStockLayout:React.FC<ItemLayOutProps> = ({items}) => {\r\n    const [selectedItem, setSelectedItem] = useState<Item | null>(null);\r\n    const handleOpenModal = (item: Item) => {\r\n        setSelectedItem(item);\r\n    };\r\n\r\n    const handleCloseModal = () => {\r\n        setSelectedItem(null);\r\n    };\r\n\r\n    const handleStockUpdate = (product:Item) => {\r\n        // 변경된 재고 수량 값을 이용하여 필요한 로직 수행\r\n        // 예: API 호출 등\r\n    };\r\n\r\n    const [searchText, setSearchText] = useState('');\r\n    const [searchCategory,setSearchCategory] = useState('');\r\n    // 검색 결과 상태 관리\r\n    const [searchedItems, setSearchedItems] = useState<Item[]>([]);\r\n\r\n    // 검색어 입력 시 실행되는 함수\r\n    const handleSearchInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSearchText(event.target.value);\r\n    };\r\n\r\n    // 카테고리 선택 시 실행되는 함수\r\n    const handleCategoryChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n        setSearchCategory(event.target.value);\r\n    };\r\n\r\n    const handleSearch = () => {\r\n        // 검색어가 있을 경우에만 서버로 요청\r\n        if (searchText.trim() !== '') {\r\n            axios\r\n                .get(`/adminstock/search/${searchCategory}`, {\r\n                    params: {\r\n                        searchText: searchText,\r\n                    },\r\n                })\r\n                .then((response) => {\r\n                    // 검색 결과를 받아온 후 처리\r\n                    const searchedItems = response.data;\r\n                    setSearchedItems(searchedItems);\r\n                })\r\n                .catch((error) => {\r\n                    console.log(error);\r\n                });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // 검색 결과가 변경될 때마다 호출되는 로직\r\n        if (searchedItems.length > 0) {\r\n            // 검색 결과가 있을 경우 추가 작업 수행 가능\r\n            console.log(searchedItems);\r\n        }\r\n    }, [searchedItems]);\r\n\r\n\r\n    return (\r\n        <section>\r\n            {/* 검색 입력란과 검색 버튼 */}\r\n            <div className=\"search-bar_stock\">\r\n            <select className=\"admincategory_stock_layout\" value={searchCategory} onChange={handleCategoryChange}>\r\n                <option value=\"\">카테고리 선택</option>\r\n                <option value=\"tent\">텐트/타프</option>\r\n                <option value=\"chair\">테이블/체어</option>\r\n                <option value=\"mat\">침낭/매트</option>\r\n                <option value=\"cook\">취사용품</option>\r\n                <option value=\"etc\">소품</option>\r\n            </select>\r\n                <input type=\"text\" value={searchText} onChange={handleSearchInputChange} placeholder=\"상품명검색\" />\r\n                <button onClick={handleSearch}>검색</button>\r\n            </div>\r\n            <table className='AdminStock_tabcontenttable'>\r\n                <thead>\r\n                <tr className='AdminStock_contenttableth'>\r\n                    <th>상품이미지</th>\r\n                    <th>상품코드</th>\r\n                    <th>상품명</th>\r\n                    <th>상품가격(원)</th>\r\n                    <th>재고수량</th>\r\n                    <th>재고수정</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {(searchedItems.length > 0 ? searchedItems : items).map((item) => (\r\n                <tr className='AdminStock_contenttabletd'>\r\n                    <td>\r\n                        <img className='AdminStock_contentImg' src={item.imagePath} />\r\n                    </td>\r\n                    <td>{item.itemId}</td>\r\n                    <td>{item.name}</td>\r\n                    <td>{item.price}</td>\r\n                    <td>{item.currentStock}</td>\r\n                    <td>\r\n                        <button className='AdminStock_modifyBtn' onClick={() => handleOpenModal(item)}>수정</button>\r\n                    </td>\r\n                </tr>\r\n                ))}\r\n                </tbody>\r\n            </table>\r\n            {selectedItem && (\r\n                <AdminStockUpdate\r\n                    item={selectedItem}\r\n                    isOpen={true}\r\n                    closeModal={handleCloseModal}\r\n                    updateStock={handleStockUpdate}\r\n                />\r\n            )}\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default AdminStockLayout;","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/adminorder/AdminOrderPaymentFinish.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/adminorder/AdminOrderAllFinish.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/adminorder/AdminOrderDelivery.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardBoardFreeboard.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardBoardReview.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardBoardGatherCamper.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardBoardCampStory.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardStockCook.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardStockChair.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardStockEtc.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardStockMat.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardStockTent.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/adminstock/AdminStockUpdate.tsx",["537","538","539"],[],"// AdminStockUpdate.jsx\r\n\r\nimport React, {useState, useEffect} from 'react';\r\nimport Modal from 'react-modal';\r\nimport {Item} from '../../../../types';\r\nimport axios from \"axios\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport '../../../../styles/adminStyles/AdminStockUpdate.css';\r\n\r\nModal.setAppElement('#root');\r\n\r\ninterface AdminStockUpdateProps {\r\n    isOpen: boolean;\r\n    closeModal: () => void;\r\n    updateStock: (product: Item) => void;\r\n    item: Item;\r\n}\r\n\r\ninterface stockTmp {\r\n    itemId: string;\r\n    categoryId: string;\r\n    currentStock: number;\r\n}\r\n\r\nconst AdminStockUpdate: React.FC<AdminStockUpdateProps> = ({\r\n                                                               isOpen,\r\n                                                               closeModal,\r\n                                                               updateStock,\r\n                                                               item,\r\n                                                           }) => {\r\n    const [currentStock, setCurrentStock] = useState(item.currentStock);\r\n    const history = useNavigate ();\r\n    const [dataupdate, setDataupdate] = useState<stockTmp>({\r\n        itemId: \"\",\r\n        categoryId: \"\",\r\n        currentStock: 0,\r\n    });\r\n\r\n    useEffect(() => {\r\n        setCurrentStock(item.currentStock);\r\n        setDataupdate((prevData) => ({\r\n            ...prevData,\r\n            itemId: item.itemId,\r\n            categoryId: item.categoryId,\r\n            currentStock: item.currentStock,\r\n        }));\r\n    }, [item.currentStock]);\r\n\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        axios.put(\"/adminstock/currentstock\", null, {params: dataupdate})\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    window.location.href = '/';\r\n                    alert(\"정보 수정 성공 \");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n                window.location.href = '/adminstock';\r\n                alert(error);\r\n            });\r\n    };\r\n\r\n    // 모달 닫기 함수\r\n    const handleCloseModal = () => {\r\n        closeModal(); // 모달 닫기\r\n    };\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setDataupdate({ ...dataupdate, [e.target.name]: e.target.value });\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            isOpen={isOpen}\r\n            onRequestClose={handleCloseModal} // 모달 닫기 함수 사용\r\n            contentLabel=\"Add Product Modal\"\r\n            className='adminmodal_update'\r\n        >\r\n            <h2 className='adminmodal_title'>상품 재고 수정</h2>\r\n            <div>\r\n                <img className='adminmodal_img' src={item.imagePath} alt=\"상품 이미지\"/>\r\n                <p className='adminmodal_p'>카테고리 : {item.categoryId}</p>\r\n                <p className='adminmodal_p'>아이템 id: {item.itemId}</p>\r\n                <p className='adminmodal_p'>아이템 명: {item.name}</p>\r\n            </div>\r\n            <form className='adminmodal_form' onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"number\"\r\n                    placeholder=\"재고 수정\"\r\n                    value={dataupdate.currentStock}\r\n                    name={\"currentStock\"}\r\n                    className='adminmodal_input'\r\n                    onChange={handleChange}/>\r\n                <button className='adminmodal_btn' type=\"submit\">재고 수정</button>\r\n                <button className='adminmodal_btn' onClick={handleCloseModal}>취소</button>\r\n            </form>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default AdminStockUpdate;\r\n","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/adminorder/AdminOrderLayout.tsx",["540","541"],[],"import React, {useEffect, useState} from 'react';\r\nimport {Item, Posting, Tmp} from \"../../../../types\";\r\nimport '../../../../styles/adminStyles/admindashboard/AdminDashboardOrderLayout.css';\r\nimport axios from \"axios\";\r\n\r\ninterface TmpLayOut {\r\n    tmp: Tmp[];\r\n}\r\nconst AdminOrderLayout:React.FC<TmpLayOut> = ({tmp}) => {\r\n\r\n    const formatDate = (dateString: string) => {\r\n        const date = new Date(dateString);\r\n        const year = date.getFullYear();\r\n        const month = String(date.getMonth() + 1).padStart(2, '0');\r\n        const day = String(date.getDate()).padStart(2, '0');\r\n        const hour = String(date.getHours()).padStart(2, '0');\r\n        const minute = String(date.getMinutes()).padStart(2, '0');\r\n        const weekday = ['일', '월', '화', '수', '목', '금', '토'][date.getDay()];\r\n\r\n        return `${year}.${month}.${day} ${weekday} ${hour}시${minute}분`;\r\n    };\r\n\r\n    // 검색어 상태 관리\r\n    const [searchText, setSearchText] = useState('');\r\n    const [searchCategory,setSearchCategory] = useState('');\r\n    // 검색 결과 상태 관리\r\n    const [searchedOrders, setSearchedOrders] = useState<Tmp[]>([]);\r\n\r\n    // 검색어 입력 시 실행되는 함수\r\n    const handleSearchInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSearchText(event.target.value);\r\n    };\r\n\r\n    // 카테고리 선택 시 실행되는 함수\r\n    const handleCategoryChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n        setSearchCategory(event.target.value);\r\n    };\r\n\r\n    const handleSearch = () => {\r\n        // 검색어가 있을 경우에만 서버로 요청\r\n        if (searchText.trim() !== '') {\r\n            axios\r\n                .get(`/admindashboard/order/search/${searchCategory}`, {\r\n                    params: {\r\n                        searchText: searchText,\r\n                    },\r\n                })\r\n                .then((response) => {\r\n                    // 검색 결과를 받아온 후 처리\r\n                    const searchedOrders = response.data;\r\n                    setSearchedOrders(searchedOrders);\r\n                })\r\n                .catch((error) => {\r\n                    console.log(error);\r\n                });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // 검색 결과가 변경될 때마다 호출되는 로직\r\n        if (searchedOrders.length > 0) {\r\n            // 검색 결과가 있을 경우 추가 작업 수행 가능\r\n            console.log(searchedOrders);\r\n        }\r\n    }, [searchedOrders]);\r\n\r\n    return (\r\n        <section>\r\n            {/* 검색 입력란과 검색 버튼 */}\r\n            <div className=\"search-bar_order\">\r\n            <select className=\"admincategoryorder_layout\" value={searchCategory} onChange={handleCategoryChange}>\r\n                <option value=\"\">카테고리 선택</option>\r\n                <option value=\"orderid\">상품ID</option>\r\n                <option value=\"userid\">주문자ID</option>\r\n            </select>\r\n                <input type=\"text\" value={searchText} onChange={handleSearchInputChange} placeholder=\"제목검색\" />\r\n                <button onClick={handleSearch}>검색</button>\r\n            </div>\r\n            <table className='AdminBoard_table'>\r\n                <thead>\r\n                <tr className='AdminBoardFormth'>\r\n                    <th>주문번호</th>\r\n                    <th>주문ID</th>\r\n                    <th>가격(원)</th>\r\n                    <th>주문시간</th>\r\n                    <th>배송상태</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {(searchedOrders.length > 0 ? searchedOrders : tmp).map((item) => (\r\n                    <tr className='AdminBoardFormtd'>\r\n                        <td className='AdminBoardFormtdcenter'>{item.orderid}</td>\r\n                        <td className='AdminBoardFormtdcenter'>{item.userid}</td>\r\n                        <td className='AdminBoardFormtdcenter'>{item.deliverycost}</td>\r\n                        <td className='AdminBoardFormtdcenter'>{formatDate(item.orderdate)}</td>\r\n                        <td className='AdminBoardFormtdcenter'>{item.orderstatus}</td>\r\n                    </tr>\r\n                ))}\r\n                </tbody>\r\n            </table>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default AdminOrderLayout;","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardStockLayout.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/AdminDashboardBoardLayout.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/login/RenderUserInformation.tsx",[],[],"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/login/MyPageInputAdd.tsx",["542"],[],"import React, {useEffect, useState} from 'react';\r\nimport \"../../styles/loginStyles/MyPageInputAdd.css\"\r\nimport axios from \"axios\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\ninterface AddressData {\r\n    zonecode: string;\r\n    roadAddress: string;\r\n    jibunAddress: string;\r\n    bname: string;\r\n    apartment: string;\r\n    buildingName: string;\r\n    autoRoadAddress: string;\r\n    autoJibunAddress: string;\r\n}\r\n\r\ninterface  AddressForm{\r\n    address1: string;\r\n    address2: string;\r\n    address3: string;\r\n    address4: string;\r\n}\r\ninterface MyPageInputAddProps {\r\n    setChange: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nconst MyPageInputAdd:React.FC<MyPageInputAddProps> = ({setChange}) => {\r\n    const history = useNavigate ();\r\n    const [userAddress , setUserAdderss] = useState<AddressForm>({\r\n        address1 :\"\",\r\n        address2 :\"\",\r\n        address3 :\"\",\r\n        address4 :\"\",\r\n\r\n    });\r\n\r\n    const handlePostcodeSearch = () => {\r\n        new (window as any).daum.Postcode({\r\n            oncomplete: (data: AddressData) => {\r\n                const roadAddr = data.roadAddress;\r\n                const extraRoadAddr = /[동|로|가]$/g.test(data.bname) ? data.bname : '';\r\n                const buildingName = data.buildingName;\r\n                let extraAddress = '';\r\n\r\n                if (buildingName !== '' && data.apartment === 'Y') {\r\n                    extraAddress = extraRoadAddr !== '' ? `, ${buildingName}` : buildingName;\r\n                }\r\n\r\n                if (extraAddress !== '') {\r\n                    extraAddress = ` (${extraAddress})`;\r\n                }\r\n\r\n                (document.getElementById('sample4_postcode') as HTMLInputElement).value = data.zonecode;\r\n                (document.getElementById('sample4_roadAddress') as HTMLInputElement).value = roadAddr;\r\n                (document.getElementById('sample4_jibunAddress') as HTMLInputElement).value = data.jibunAddress;\r\n                (document.getElementById('sample4_extraAddress') as HTMLInputElement).value = extraAddress;\r\n\r\n                setUserAdderss({\r\n                    ...userAddress,\r\n                    address1 : data.zonecode,\r\n                    address2 : roadAddr,\r\n                    address4 : extraAddress,\r\n                });\r\n\r\n                const guideTextBox = document.getElementById('guide');\r\n                if (data.autoRoadAddress) {\r\n                    const expRoadAddr = `${data.autoRoadAddress}${extraAddress}`;\r\n                    guideTextBox!.innerHTML = `(예상 도로명 주소: ${expRoadAddr})`;\r\n                    guideTextBox!.style.display = 'block';\r\n                } else if (data.autoJibunAddress) {\r\n                    const expJibunAddr = data.autoJibunAddress;\r\n                    guideTextBox!.innerHTML = `(예상 지번 주소: ${expJibunAddr})`;\r\n                    guideTextBox!.style.display = 'block';\r\n                } else {\r\n                    guideTextBox!.innerHTML = '';\r\n                    guideTextBox!.style.display = 'none';\r\n                }\r\n            },\r\n        }).open();\r\n    };\r\n\r\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setUserAdderss({ ...userAddress, [e.target.name]: e.target.value });\r\n    };\r\n\r\n    const handlChange = () => {\r\n        setChange(false);\r\n    }\r\n\r\n    const handleSubmit =  (e:React.MouseEvent<HTMLButtonElement>) => {\r\n        e.preventDefault();\r\n        axios.put(\"/addAddress\" , userAddress)\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    window.location.href = '/mypage';// 성공시 마이페이지\r\n                    alert(\"정보 수정 성공 \");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                if(error.response.status === 401){\r\n                    alert(\"사용자를 찾지 못했습니다. 로그인 상태를 확인해주세요.\")\r\n                }else if(error.response.status === 500){\r\n                    alert(\"서버에 문제가 있습니다. 잠시만 기다려주세요.\");\r\n                }\r\n                console.log(error.response);\r\n                window.location.href = '/mypage';\r\n\r\n            });\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        const script = document.createElement('script');\r\n        script.src = '//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js';\r\n        script.async = true;\r\n        document.body.appendChild(script);\r\n\r\n        return () => {\r\n            document.body.removeChild(script);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <form className={\"addMainForm\"} >\r\n            <h1>주소 추가</h1>\r\n            <table className={\"addMainTable\"}>\r\n                <colgroup>\r\n                    <col style={{ width: '15%' }} />\r\n                    <col style={{ width: '70%' }} />\r\n                    <col style={{ width: '15%' }} />\r\n                </colgroup>\r\n                <tbody>\r\n                <tr className={\"addMainTableTr\"}>\r\n                    <th>우편번호</th>\r\n                    <td>\r\n                        <input type=\"text\" id={\"sample4_postcode\"} name={\"address1\"} placeholder=\"우편번호\" onChange={handleInputChange} readOnly />\r\n                    </td>\r\n                    <td>\r\n                        <button type=\"button\" onClick={handlePostcodeSearch}>우편번호 찾기</button>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <th>도로명 주소</th>\r\n                    <td colSpan={2}>\r\n                        <input type=\"text\" id={\"sample4_roadAddress\"} name={\"address2\"} placeholder=\"도로명주소\"  onChange={handleInputChange } readOnly/>\r\n                    </td>\r\n                </tr>\r\n                <tr className={\"jibunAddress\"} >\r\n                    <th>지번 주소</th>\r\n                    <td colSpan={2}>\r\n                        <input type=\"text\" id=\"sample4_jibunAddress\" placeholder=\"지번주소\" readOnly/>\r\n                    </td>\r\n                </tr>\r\n                <tr style={{ color: '#999', display: 'none' }}>\r\n                    <th></th>\r\n                    <td>\r\n                        <span id=\"guide\" style={{ color: '#999', display: 'none' }}></span>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <th>상세 주소</th>\r\n                    <td colSpan={2}>\r\n                        <input type=\"text\" id={\"sample4_detailAddress\"} name={\"address3\"} placeholder=\"상세주소\" onChange={handleInputChange}/>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <th>참고 항목</th>\r\n                    <td colSpan={2}>\r\n                        <input type=\"text\" id={\"sample4_extraAddress\"} name={\"address4\"} placeholder=\"참고항목\" onChange={handleInputChange} readOnly/>\r\n                    </td>\r\n                </tr>\r\n                </tbody>\r\n            </table>\r\n            <button type=\"submit\" onClick={handleSubmit} className={\"addMainFormBtn\"}>저장</button>\r\n            <button type={\"button\"} onClick={handlChange}>취소</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default MyPageInputAdd;\r\n","/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/payment/ItemlistOrder.tsx",["543"],[],"import React from 'react';\nimport \"../../styles/paymentStyles/ItemlistCart.css\"\nimport {OrderList} from \"./Order\";\n\ninterface OrderListProps {\n    orders : OrderList[];\n}\n\nconst ItemlistOrder: React.FC<OrderListProps> = ({orders}) => {\n    return (\n        <div className=\"item_cart\">\n            <div className=\"list_table_wrap\">\n                <table className=\"itemlist_table\" border={1}>\n                    <caption>\n                        <span className=\"texttext\">\n                        상품 이미지, 상품명, 수량, 가격 정보 및 선택 기능, 삭제 기능을 제공하는 표\n                        </span>\n                    </caption>\n\n                    <thead className=\"itemlist_thead\">\n                    <tr>\n                        <th scope=\"col\" className=\"itemimg\">\n                            <span className=\"img_item\">사진</span>\n                        </th>\n                        <th scope=\"col\" className=\"itemTitle\">\n                            <span className=\"itemTitle_text\">상품명</span>\n                        </th>\n                        <th scope=\"col\" className=\"item_count\">\n                            <span className=\"count\">주문 수량</span>\n                        </th>\n                        <th scope=\"col\" className=\"pay\">\n                            <span className=\"price\">금액</span>\n                        </th>\n                        <th scope=\"col\" className=\"list_delete\">\n                            <span className=\"delete_thead\">삭제</span>\n                        </th>\n                    </tr>\n                    </thead>\n\n                    <tbody className=\"itemlist_tbody\">\n                    {orders.map((order) => (\n                        <tr key={order.cartid} className=\"selected list_main\">\n                            <td className=\"itemimg\">\n                                <img src={order.image_path} alt=\"\" className=\"img_item\"\n                                />\n                            </td>\n                            <td className=\"itemTitle\">\n                                <span  title={order.name} className=\"itemTitle_text\">{order.name}\n                                </span>\n                            </td>\n                            {/* 수량변경 버튼 */}\n                            <td title=\"주문수량\" className=\"item_count\">\n                                <span className=\"count\">{order.itemcount}</span>\n                            </td>\n                            <td className=\"price_box\">\n                                <div className=\"price\">\n                                    {(order.price*order.itemcount)}\n                                </div>\n                            </td>\n                            <td className=\"list_delete\">\n                                <a href=\"#\" role=\"button\" className=\"btn_delete_one\"\n                                ><span className=\"delete_one\">삭제</span></a\n                                >\n                            </td>\n                        </tr>\n                    ))}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    );\n};\n\nexport default ItemlistOrder;",{"ruleId":"544","severity":1,"message":"545","line":26,"column":8,"nodeType":"546","messageId":"547","endLine":26,"endColumn":17},{"ruleId":"544","severity":1,"message":"548","line":38,"column":11,"nodeType":"546","messageId":"547","endLine":38,"endColumn":25},{"ruleId":"549","severity":1,"message":"550","line":88,"column":17,"nodeType":"551","messageId":"552","endLine":88,"endColumn":68,"fix":"553"},{"ruleId":"549","severity":1,"message":"550","line":91,"column":17,"nodeType":"551","messageId":"552","endLine":91,"endColumn":67,"fix":"554"},{"ruleId":"549","severity":1,"message":"550","line":94,"column":17,"nodeType":"551","messageId":"552","endLine":94,"endColumn":69,"fix":"555"},{"ruleId":"549","severity":1,"message":"550","line":97,"column":17,"nodeType":"551","messageId":"552","endLine":97,"endColumn":66,"fix":"556"},{"ruleId":"544","severity":1,"message":"557","line":8,"column":12,"nodeType":"546","messageId":"547","endLine":8,"endColumn":21},{"ruleId":"544","severity":1,"message":"557","line":8,"column":12,"nodeType":"546","messageId":"547","endLine":8,"endColumn":21},{"ruleId":"544","severity":1,"message":"557","line":8,"column":12,"nodeType":"546","messageId":"547","endLine":8,"endColumn":21},{"ruleId":"544","severity":1,"message":"557","line":8,"column":12,"nodeType":"546","messageId":"547","endLine":8,"endColumn":21},{"ruleId":"544","severity":1,"message":"558","line":2,"column":9,"nodeType":"546","messageId":"547","endLine":2,"endColumn":13},{"ruleId":"559","severity":1,"message":"560","line":9,"column":29,"nodeType":"551","endLine":9,"endColumn":58},{"ruleId":"561","severity":1,"message":"562","line":9,"column":37,"nodeType":"563","messageId":"564","endLine":9,"endColumn":57},{"ruleId":"559","severity":1,"message":"560","line":10,"column":29,"nodeType":"551","endLine":10,"endColumn":58},{"ruleId":"561","severity":1,"message":"562","line":10,"column":37,"nodeType":"563","messageId":"564","endLine":10,"endColumn":57},{"ruleId":"559","severity":1,"message":"560","line":11,"column":29,"nodeType":"551","endLine":11,"endColumn":58},{"ruleId":"561","severity":1,"message":"562","line":11,"column":37,"nodeType":"563","messageId":"564","endLine":11,"endColumn":57},{"ruleId":"559","severity":1,"message":"560","line":12,"column":29,"nodeType":"551","endLine":12,"endColumn":58},{"ruleId":"561","severity":1,"message":"562","line":12,"column":37,"nodeType":"563","messageId":"564","endLine":12,"endColumn":57},{"ruleId":"559","severity":1,"message":"560","line":13,"column":29,"nodeType":"551","endLine":13,"endColumn":58},{"ruleId":"561","severity":1,"message":"562","line":13,"column":37,"nodeType":"563","messageId":"564","endLine":13,"endColumn":57},{"ruleId":"559","severity":1,"message":"560","line":14,"column":29,"nodeType":"551","endLine":14,"endColumn":58},{"ruleId":"561","severity":1,"message":"562","line":14,"column":37,"nodeType":"563","messageId":"564","endLine":14,"endColumn":57},{"ruleId":"559","severity":1,"message":"560","line":18,"column":25,"nodeType":"551","endLine":18,"endColumn":81},{"ruleId":"561","severity":1,"message":"562","line":18,"column":33,"nodeType":"563","messageId":"564","endLine":18,"endColumn":53},{"ruleId":"559","severity":1,"message":"560","line":19,"column":25,"nodeType":"551","endLine":19,"endColumn":81},{"ruleId":"561","severity":1,"message":"562","line":19,"column":33,"nodeType":"563","messageId":"564","endLine":19,"endColumn":53},{"ruleId":"559","severity":1,"message":"560","line":20,"column":25,"nodeType":"551","endLine":20,"endColumn":81},{"ruleId":"561","severity":1,"message":"562","line":20,"column":33,"nodeType":"563","messageId":"564","endLine":20,"endColumn":53},{"ruleId":"544","severity":1,"message":"557","line":8,"column":12,"nodeType":"546","messageId":"547","endLine":8,"endColumn":21},{"ruleId":"544","severity":1,"message":"558","line":2,"column":10,"nodeType":"546","messageId":"547","endLine":2,"endColumn":14},{"ruleId":"544","severity":1,"message":"557","line":9,"column":12,"nodeType":"546","messageId":"547","endLine":9,"endColumn":21},{"ruleId":"565","severity":1,"message":"566","line":40,"column":8,"nodeType":"567","endLine":40,"endColumn":16,"suggestions":"568"},{"ruleId":"544","severity":1,"message":"569","line":6,"column":8,"nodeType":"546","messageId":"547","endLine":6,"endColumn":13},{"ruleId":"565","severity":1,"message":"570","line":56,"column":8,"nodeType":"567","endLine":56,"endColumn":10,"suggestions":"571"},{"ruleId":"565","severity":1,"message":"570","line":24,"column":8,"nodeType":"567","endLine":24,"endColumn":10,"suggestions":"572"},{"ruleId":"544","severity":1,"message":"573","line":1,"column":16,"nodeType":"546","messageId":"547","endLine":1,"endColumn":25},{"ruleId":"544","severity":1,"message":"569","line":4,"column":8,"nodeType":"546","messageId":"547","endLine":4,"endColumn":13},{"ruleId":"544","severity":1,"message":"574","line":9,"column":11,"nodeType":"546","messageId":"547","endLine":9,"endColumn":18},{"ruleId":"575","severity":1,"message":"576","line":83,"column":27,"nodeType":"577","messageId":"578","endLine":83,"endColumn":29},{"ruleId":"565","severity":1,"message":"570","line":40,"column":8,"nodeType":"567","endLine":40,"endColumn":10,"suggestions":"579"},{"ruleId":"565","severity":1,"message":"570","line":40,"column":8,"nodeType":"567","endLine":40,"endColumn":15,"suggestions":"580"},{"ruleId":"544","severity":1,"message":"581","line":15,"column":16,"nodeType":"546","messageId":"547","endLine":15,"endColumn":22},{"ruleId":"544","severity":1,"message":"582","line":16,"column":12,"nodeType":"546","messageId":"547","endLine":16,"endColumn":17},{"ruleId":"544","severity":1,"message":"583","line":16,"column":18,"nodeType":"546","messageId":"547","endLine":16,"endColumn":26},{"ruleId":"544","severity":1,"message":"584","line":17,"column":11,"nodeType":"546","messageId":"547","endLine":17,"endColumn":19},{"ruleId":"544","severity":1,"message":"585","line":31,"column":42,"nodeType":"546","messageId":"547","endLine":31,"endColumn":48},{"ruleId":"575","severity":1,"message":"576","line":23,"column":26,"nodeType":"577","messageId":"578","endLine":23,"endColumn":28},{"ruleId":"575","severity":1,"message":"576","line":23,"column":54,"nodeType":"577","messageId":"578","endLine":23,"endColumn":56},{"ruleId":"544","severity":1,"message":"586","line":28,"column":11,"nodeType":"546","messageId":"547","endLine":28,"endColumn":34},{"ruleId":"565","severity":1,"message":"587","line":66,"column":8,"nodeType":"567","endLine":66,"endColumn":22,"suggestions":"588"},{"ruleId":"544","severity":1,"message":"589","line":15,"column":11,"nodeType":"546","messageId":"547","endLine":15,"endColumn":31},{"ruleId":"544","severity":1,"message":"590","line":33,"column":12,"nodeType":"546","messageId":"547","endLine":33,"endColumn":18},{"ruleId":"544","severity":1,"message":"591","line":35,"column":12,"nodeType":"546","messageId":"547","endLine":35,"endColumn":20},{"ruleId":"565","severity":1,"message":"592","line":83,"column":8,"nodeType":"567","endLine":83,"endColumn":40,"suggestions":"593"},{"ruleId":"565","severity":1,"message":"594","line":100,"column":8,"nodeType":"567","endLine":100,"endColumn":22,"suggestions":"595"},{"ruleId":"544","severity":1,"message":"573","line":1,"column":16,"nodeType":"546","messageId":"547","endLine":1,"endColumn":25},{"ruleId":"544","severity":1,"message":"596","line":1,"column":27,"nodeType":"546","messageId":"547","endLine":1,"endColumn":35},{"ruleId":"544","severity":1,"message":"597","line":3,"column":8,"nodeType":"546","messageId":"547","endLine":3,"endColumn":12},{"ruleId":"559","severity":1,"message":"560","line":113,"column":33,"nodeType":"551","endLine":114,"endColumn":34},{"ruleId":"544","severity":1,"message":"573","line":1,"column":16,"nodeType":"546","messageId":"547","endLine":1,"endColumn":25},{"ruleId":"544","severity":1,"message":"596","line":1,"column":27,"nodeType":"546","messageId":"547","endLine":1,"endColumn":35},{"ruleId":"544","severity":1,"message":"545","line":4,"column":9,"nodeType":"546","messageId":"547","endLine":4,"endColumn":18},{"ruleId":"544","severity":1,"message":"558","line":2,"column":10,"nodeType":"546","messageId":"547","endLine":2,"endColumn":14},{"ruleId":"544","severity":1,"message":"598","line":14,"column":30,"nodeType":"546","messageId":"547","endLine":14,"endColumn":49},{"ruleId":"544","severity":1,"message":"599","line":5,"column":9,"nodeType":"546","messageId":"547","endLine":5,"endColumn":13},{"ruleId":"544","severity":1,"message":"600","line":13,"column":12,"nodeType":"546","messageId":"547","endLine":13,"endColumn":16},{"ruleId":"544","severity":1,"message":"601","line":38,"column":11,"nodeType":"546","messageId":"547","endLine":38,"endColumn":27},{"ruleId":"544","severity":1,"message":"602","line":2,"column":8,"nodeType":"546","messageId":"547","endLine":2,"endColumn":27},{"ruleId":"544","severity":1,"message":"596","line":1,"column":16,"nodeType":"546","messageId":"547","endLine":1,"endColumn":24},{"ruleId":"575","severity":1,"message":"576","line":8,"column":22,"nodeType":"577","messageId":"578","endLine":8,"endColumn":24},{"ruleId":"575","severity":1,"message":"576","line":8,"column":50,"nodeType":"577","messageId":"578","endLine":8,"endColumn":52},{"ruleId":"544","severity":1,"message":"603","line":2,"column":9,"nodeType":"546","messageId":"547","endLine":2,"endColumn":13},{"ruleId":"544","severity":1,"message":"604","line":2,"column":23,"nodeType":"546","messageId":"547","endLine":2,"endColumn":30},{"ruleId":"544","severity":1,"message":"605","line":4,"column":9,"nodeType":"546","messageId":"547","endLine":4,"endColumn":20},{"ruleId":"544","severity":1,"message":"606","line":6,"column":8,"nodeType":"546","messageId":"547","endLine":6,"endColumn":24},{"ruleId":"544","severity":1,"message":"607","line":12,"column":12,"nodeType":"546","messageId":"547","endLine":12,"endColumn":21},{"ruleId":"544","severity":1,"message":"573","line":1,"column":17,"nodeType":"546","messageId":"547","endLine":1,"endColumn":26},{"ruleId":"544","severity":1,"message":"596","line":1,"column":28,"nodeType":"546","messageId":"547","endLine":1,"endColumn":36},{"ruleId":"544","severity":1,"message":"573","line":1,"column":17,"nodeType":"546","messageId":"547","endLine":1,"endColumn":26},{"ruleId":"544","severity":1,"message":"596","line":1,"column":28,"nodeType":"546","messageId":"547","endLine":1,"endColumn":36},{"ruleId":"544","severity":1,"message":"574","line":21,"column":11,"nodeType":"546","messageId":"547","endLine":21,"endColumn":18},{"ruleId":"544","severity":1,"message":"604","line":2,"column":15,"nodeType":"546","messageId":"547","endLine":2,"endColumn":22},{"ruleId":"608","severity":1,"message":"609","line":98,"column":25,"nodeType":"551","endLine":98,"endColumn":87},{"ruleId":"544","severity":1,"message":"610","line":31,"column":12,"nodeType":"546","messageId":"547","endLine":31,"endColumn":24},{"ruleId":"544","severity":1,"message":"574","line":32,"column":11,"nodeType":"546","messageId":"547","endLine":32,"endColumn":18},{"ruleId":"565","severity":1,"message":"611","line":47,"column":8,"nodeType":"567","endLine":47,"endColumn":27,"suggestions":"612"},{"ruleId":"544","severity":1,"message":"603","line":2,"column":9,"nodeType":"546","messageId":"547","endLine":2,"endColumn":13},{"ruleId":"544","severity":1,"message":"604","line":2,"column":15,"nodeType":"546","messageId":"547","endLine":2,"endColumn":22},{"ruleId":"544","severity":1,"message":"574","line":28,"column":11,"nodeType":"546","messageId":"547","endLine":28,"endColumn":18},{"ruleId":"559","severity":1,"message":"560","line":61,"column":33,"nodeType":"551","endLine":62,"endColumn":34},"@typescript-eslint/no-unused-vars","'OrderList' is defined but never used.","Identifier","unusedVar","'logoutTimerRef' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"613","text":"614"},{"range":"615","text":"614"},{"range":"616","text":"614"},{"range":"617","text":"614"},"'isLoading' is assigned a value but never used.","'Link' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","no-script-url","Script URL is a form of eval.","Literal","unexpectedScriptURL","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'categoryId' and 'item'. Either include them or remove the dependency array.","ArrayExpression",["618"],"'error' is defined but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["619"],["620"],"'useEffect' is defined but never used.","'history' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["621"],["622"],"'setTmp' is assigned a value but never used.","'graph' is assigned a value but never used.","'setGraph' is assigned a value but never used.","'navigate' is assigned a value but never used.","'totals' is assigned a value but never used.","'handleParentStateChange' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchComments'. Either include it or remove the dependency array.",["623"],"'AddProductModalProps' is defined but never used.","'isName' is assigned a value but never used.","'username' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'items.length' and 'visibleItems'. Either include them or remove the dependency array.",["624"],"React Hook useEffect has a missing dependency: 'isLoading'. Either include it or remove the dependency array.",["625"],"'useState' is defined but never used.","'cart' is defined but never used.","'setVisiblePostCount' is assigned a value but never used.","'text' is defined but never used.","'name' is assigned a value but never used.","'handleNameChange' is assigned a value but never used.","'ReplyInputContainer' is defined but never used.","'Item' is defined but never used.","'Posting' is defined but never used.","'useNavigate' is defined but never used.","'AdminStockUpdate' is defined but never used.","'graphData' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'currentStock' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'item.categoryId' and 'item.itemId'. Either include them or remove the dependency array. If 'setDataupdate' needs the current value of 'item.itemId', you can also switch to useReducer instead of useState and read 'item.itemId' in the reducer.",["626"],[3119,3119]," rel=\"noreferrer\"",[3315,3315],[3511,3511],[3704,3704],{"desc":"627","fix":"628"},{"desc":"629","fix":"630"},{"desc":"629","fix":"631"},{"desc":"629","fix":"632"},{"desc":"633","fix":"634"},{"desc":"635","fix":"636"},{"desc":"637","fix":"638"},{"desc":"639","fix":"640"},{"desc":"641","fix":"642"},"Update the dependencies array to be: [categoryId, item, itemId]",{"range":"643","text":"644"},"Update the dependencies array to be: [history]",{"range":"645","text":"646"},{"range":"647","text":"646"},{"range":"648","text":"646"},"Update the dependencies array to be: [history, rflag]",{"range":"649","text":"650"},"Update the dependencies array to be: [id, category, fetchComments]",{"range":"651","text":"652"},"Update the dependencies array to be: [isLoading, items.length, visibleItems, visibleItems.length]",{"range":"653","text":"654"},"Update the dependencies array to be: [isLoading, visibleItems]",{"range":"655","text":"656"},"Update the dependencies array to be: [item.categoryId, item.currentStock, item.itemId]",{"range":"657","text":"658"},[1378,1386],"[categoryId, item, itemId]",[2055,2057],"[history]",[590,592],[1239,1241],[1317,1324],"[history, rflag]",[2627,2641],"[id, category, fetchComments]",[2703,2735],"[isLoading, items.length, visibleItems, visibleItems.length]",[3272,3286],"[isLoading, visibleItems]",[1535,1554],"[item.categoryId, item.currentStock, item.itemId]"]