{"ast":null,"code":"import*as React from'react';import{ResponsiveBar}from'@nivo/bar';import{jsx as _jsx}from\"react/jsx-runtime\";var Barchart=function Barchart(_ref){var graphDTO=_ref.graphDTO;var handle={barClick:function barClick(data){console.log(data);},legendClick:function legendClick(data){console.log(data);}};var currentDate=new Date();// Get the current date\nconsole.log(currentDate);var previousDates=[];// Array to store previous dates\n// 이전 날짜 계산\nfor(var i=0;i<5;i++){var previousDate=new Date();// 새로운 날짜 객체 생성\npreviousDate.setDate(currentDate.getDate()-i);// 현재 날짜에서 i일을 뺌\nvar formattedDate=\"\".concat(previousDate.getMonth()+1,\"\\uC6D4\").concat(previousDate.getDate(),\"\\uC77C\");// 월과 일을 한글로 포맷팅\npreviousDates.push(formattedDate);// 이전 날짜를 배열에 추가\n}var currentMonth=currentDate.toLocaleString('default',{month:'long'});var chartData=[{bottle:\"\".concat(currentMonth,\" \\uCD1D\\uD569\"),'총합':graphDTO.totalPriceSum},{bottle:\"\".concat(previousDates[4]),'4일전':graphDTO.fourTotalPrice},{bottle:\"\".concat(previousDates[3]),'3일전':graphDTO.threeTotalPrice},{bottle:\"\".concat(previousDates[2]),'2일전':graphDTO.twoTotalPrice},{bottle:\"\".concat(previousDates[1]),'1일전':graphDTO.oneTotalPrice},{bottle:\"\".concat(previousDates[0]),'오늘':graphDTO.currTotalPrice}];return/*#__PURE__*/ (// chart height이 100%이기 때문이 chart를 덮는 마크업 요소에 height 설정\n_jsx(\"section\",{style:{width:'800px',height:'500px',margin:'0 auto'},children:/*#__PURE__*/_jsx(ResponsiveBar/**\n                 * chart에 사용될 데이터\n                 */,{data:chartData/**\n                 * chart에 보여질 데이터 key (측정되는 값)\n                 */,keys:['총합','4일전','3일전','2일전','1일전','오늘']/**\n                 * keys들을 그룹화하는 index key (분류하는 값)\n                 */,indexBy:\"bottle\"/**\n                 * chart margin\n                 */,margin:{top:50,right:130,bottom:50,left:100}/**\n                 * chart padding (bar간 간격)\n                 */,padding:0.3/**\n                 * chart 색상\n                 */,colors:['olive','brown','orange','aqua','cadetblue','wheat']// 커스터하여 사용할 때\n// colors={{ scheme: 'nivo' }} // nivo에서 제공해주는 색상 조합 사용할 때\n/**\n                 * color 적용 방식\n                 */,colorBy:\"id\"// 색상을 keys 요소들에 각각 적용\n// colorBy=\"indexValue\" // indexBy로 묵인 인덱스별로 각각 적용\n,theme:{/**\n                     * label style (bar에 표현되는 글씨)\n                     */labels:{text:{fontSize:14,fill:'#000000'}},/**\n                     * legend style (default로 우측 하단에 있는 색상별 key 표시)\n                     */legends:{text:{fontSize:12,fill:'#000000'}},axis:{/**\n                         * axis legend style (bottom, left에 있는 글씨)\n                         */legend:{text:{fontSize:20,fill:'#000000'}},/**\n                         * axis ticks style (bottom, left에 있는 값)\n                         */ticks:{text:{fontSize:16,fill:'#000000'}}}}/**\n                 * axis bottom 설정\n                 */,axisBottom:{tickSize:5,// 값 설명하기 위해 튀어나오는 점 크기\ntickPadding:5,// tick padding\ntickRotation:0,// tick 기울기\n// legend: '종류', // bottom 글씨\nlegendPosition:'middle',// 글씨 위치\nlegendOffset:40// 글씨와 chart간 간격\n}/**\n                 * axis left 설정\n                 */,axisLeft:{tickSize:5,// 값 설명하기 위해 튀어나오는 점 크기\ntickPadding:5,// tick padding\ntickRotation:0,// tick 기울기\nlegend:'매출액(원)',// left 글씨\nlegendPosition:'middle',// 글씨 위치\nlegendOffset:-90// 글씨와 chart간 간격\n}/**\n                 * label 안보이게 할 기준 width\n                 */,labelSkipWidth:36/**\n                 * label 안보이게 할 기준 height\n                 */,labelSkipHeight:12/**\n                 * bar 클릭 이벤트\n                 */,onClick:handle.barClick/**\n                 * legend 설정 (default로 우측 하단에 있는 색상별 key 표시)\n                 */,legends:[{dataFrom:'keys',// 보일 데이터 형태\nanchor:'bottom-right',// 위치\ndirection:'column',// item 그려지는 방향\njustify:false,// 글씨, 색상간 간격 justify 적용 여부\ntranslateX:120,// chart와 X 간격\ntranslateY:0,// chart와 Y 간격\nitemsSpacing:2,// item간 간격\nitemWidth:100,// item width\nitemHeight:20,// item height\nitemDirection:'left-to-right',// item 내부에 그려지는 방향\nitemOpacity:0.85,// item opacity\nsymbolSize:20,// symbol (색상 표기) 크기\neffects:[{// 추가 효과 설정 (hover하면 item opacity 1로 변경)\non:'hover',style:{itemOpacity:1}}],onClick:handle.legendClick// legend 클릭 이벤트\n}]})}));};export default Barchart;","map":{"version":3,"names":["React","ResponsiveBar","jsx","_jsx","Barchart","_ref","graphDTO","handle","barClick","data","console","log","legendClick","currentDate","Date","previousDates","i","previousDate","setDate","getDate","formattedDate","concat","getMonth","push","currentMonth","toLocaleString","month","chartData","bottle","totalPriceSum","fourTotalPrice","threeTotalPrice","twoTotalPrice","oneTotalPrice","currTotalPrice","style","width","height","margin","children","keys","indexBy","top","right","bottom","left","padding","colors","colorBy","theme","labels","text","fontSize","fill","legends","axis","legend","ticks","axisBottom","tickSize","tickPadding","tickRotation","legendPosition","legendOffset","axisLeft","labelSkipWidth","labelSkipHeight","onClick","dataFrom","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","on"],"sources":["/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/Barchart.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ResponsiveBar } from '@nivo/bar';\nimport {GraphDTO} from \"../../../../types\";\n\ninterface Props {\n    graphDTO: GraphDTO;\n}\n\nconst Barchart: React.FC<Props> = ({ graphDTO }) => {\n\n    const handle = {\n        barClick: (data: any) => {\n            console.log(data);\n        },\n        legendClick: (data: any) => {\n            console.log(data);\n        },\n    };\n    const currentDate = new Date(); // Get the current date\n    console.log(currentDate);\n    const previousDates = []; // Array to store previous dates\n\n    // 이전 날짜 계산\n    for (let i = 0; i < 5; i++) {\n        const previousDate = new Date(); // 새로운 날짜 객체 생성\n        previousDate.setDate(currentDate.getDate() - i ); // 현재 날짜에서 i일을 뺌\n        const formattedDate = `${previousDate.getMonth() + 1}월${previousDate.getDate()}일`; // 월과 일을 한글로 포맷팅\n        previousDates.push(formattedDate); // 이전 날짜를 배열에 추가\n    }\n\n    const currentMonth = currentDate.toLocaleString('default', { month: 'long' });\n\n    const chartData: {\n        bottle: string;\n        '총합'?: number;\n        '4일전'?: number;\n        '3일전'?: number;\n        '2일전'?: number;\n        '1일전'?: number;\n        '오늘'?: number;\n    }[] = [\n        { bottle: `${currentMonth} 총합`, '총합': graphDTO.totalPriceSum },\n        { bottle: `${previousDates[4]}`, '4일전': graphDTO.fourTotalPrice },\n        { bottle: `${previousDates[3]}`, '3일전': graphDTO.threeTotalPrice },\n        { bottle: `${previousDates[2]}`, '2일전': graphDTO.twoTotalPrice },\n        { bottle: `${previousDates[1]}`, '1일전': graphDTO.oneTotalPrice },\n        { bottle: `${previousDates[0]}`, '오늘': graphDTO.currTotalPrice },\n    ];\n\n    return (\n        // chart height이 100%이기 때문이 chart를 덮는 마크업 요소에 height 설정\n        <section style={{ width: '800px', height: '500px', margin: '0 auto' }}>\n            {/*{graphDTO.map((item) => (*/}\n            <ResponsiveBar\n                /**\n                 * chart에 사용될 데이터\n                 */\n                data ={chartData}\n                /**\n                 * chart에 보여질 데이터 key (측정되는 값)\n                 */\n                keys={['총합', '4일전', '3일전','2일전', '1일전', '오늘']}\n                /**\n                 * keys들을 그룹화하는 index key (분류하는 값)\n                 */\n                indexBy=\"bottle\"\n                /**\n                 * chart margin\n                 */\n                margin={{ top: 50, right: 130, bottom: 50, left: 100 }}\n                /**\n                 * chart padding (bar간 간격)\n                 */\n                padding={0.3}\n                /**\n                 * chart 색상\n                 */\n                colors={['olive', 'brown', 'orange','aqua','cadetblue','wheat']} // 커스터하여 사용할 때\n                // colors={{ scheme: 'nivo' }} // nivo에서 제공해주는 색상 조합 사용할 때\n                /**\n                 * color 적용 방식\n                 */\n                colorBy=\"id\" // 색상을 keys 요소들에 각각 적용\n                // colorBy=\"indexValue\" // indexBy로 묵인 인덱스별로 각각 적용\n                theme={{                    /**\n                     * label style (bar에 표현되는 글씨)\n                     */\n                    labels: {\n                        text: {\n                            fontSize: 14,\n                            fill: '#000000',\n                        },\n                    },\n                    /**\n                     * legend style (default로 우측 하단에 있는 색상별 key 표시)\n                     */\n                    legends: {\n                        text: {\n                            fontSize: 12,\n                            fill: '#000000',\n                        },\n                    },\n                    axis: {\n                        /**\n                         * axis legend style (bottom, left에 있는 글씨)\n                         */\n                        legend: {\n                            text: {\n                                fontSize: 20,\n                                fill: '#000000',\n                            },\n                        },\n                        /**\n                         * axis ticks style (bottom, left에 있는 값)\n                         */\n                        ticks: {\n                            text: {\n                                fontSize: 16,\n                                fill: '#000000',\n                            },\n                        },\n                    },\n                }}\n                /**\n                 * axis bottom 설정\n                 */\n                axisBottom={{\n                    tickSize: 5, // 값 설명하기 위해 튀어나오는 점 크기\n                    tickPadding: 5, // tick padding\n                    tickRotation: 0, // tick 기울기\n                    // legend: '종류', // bottom 글씨\n                    legendPosition: 'middle', // 글씨 위치\n                    legendOffset: 40, // 글씨와 chart간 간격\n                }}\n                /**\n                 * axis left 설정\n                 */\n                axisLeft={{\n                    tickSize: 5, // 값 설명하기 위해 튀어나오는 점 크기\n                    tickPadding: 5, // tick padding\n                    tickRotation: 0, // tick 기울기\n                    legend: '매출액(원)', // left 글씨\n                    legendPosition: 'middle', // 글씨 위치\n                    legendOffset: -90, // 글씨와 chart간 간격\n                }}\n                /**\n                 * label 안보이게 할 기준 width\n                 */\n                labelSkipWidth={36}\n                /**\n                 * label 안보이게 할 기준 height\n                 */\n                labelSkipHeight={12}\n                /**\n                 * bar 클릭 이벤트\n                 */\n                onClick={handle.barClick}\n                /**\n                 * legend 설정 (default로 우측 하단에 있는 색상별 key 표시)\n                 */\n                legends={[\n                    {\n                        dataFrom: 'keys', // 보일 데이터 형태\n                        anchor: 'bottom-right', // 위치\n                        direction: 'column', // item 그려지는 방향\n                        justify: false, // 글씨, 색상간 간격 justify 적용 여부\n                        translateX: 120, // chart와 X 간격\n                        translateY: 0, // chart와 Y 간격\n                        itemsSpacing: 2, // item간 간격\n                        itemWidth: 100, // item width\n                        itemHeight: 20, // item height\n                        itemDirection: 'left-to-right', // item 내부에 그려지는 방향\n                        itemOpacity: 0.85, // item opacity\n                        symbolSize: 20, // symbol (색상 표기) 크기\n                        effects: [\n                            {\n                                // 추가 효과 설정 (hover하면 item opacity 1로 변경)\n                                on: 'hover',\n                                style: {\n                                    itemOpacity: 1,\n                                },\n                            },\n                        ],\n                        onClick: handle.legendClick, // legend 클릭 이벤트\n                    },\n                ]}\n            />\n            {/*))}*/}\n        </section>\n    );\n};\n\nexport default Barchart;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}