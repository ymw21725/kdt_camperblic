{"ast":null,"code":"var _jsxFileName = \"/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/Barchart.tsx\";\nimport * as React from 'react';\nimport { ResponsiveBar } from '@nivo/bar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Barchart = _ref => {\n  let {\n    graphDTO\n  } = _ref;\n  const handle = {\n    barClick: data => {\n      console.log(data);\n    },\n    legendClick: data => {\n      console.log(data);\n    }\n  };\n  const currentDate = new Date(); // Get the current date\n  console.log(currentDate);\n  const previousDates = []; // Array to store previous dates\n\n  // 이전 날짜 계산\n  for (let i = 0; i < 5; i++) {\n    const previousDate = new Date(); // 새로운 날짜 객체 생성\n    previousDate.setDate(currentDate.getDate() - i); // 현재 날짜에서 i일을 뺌\n    const formattedDate = `${previousDate.getMonth() + 1}월${previousDate.getDate()}일`; // 월과 일을 한글로 포맷팅\n    previousDates.push(formattedDate); // 이전 날짜를 배열에 추가\n  }\n\n  const currentMonth = currentDate.toLocaleString('default', {\n    month: 'long'\n  });\n  const chartData = [{\n    bottle: `${currentMonth} 총합`,\n    '총합': graphDTO.totalPriceSum\n  }, {\n    bottle: `${previousDates[4]}`,\n    '4일전': graphDTO.fourTotalPrice\n  }, {\n    bottle: `${previousDates[3]}`,\n    '3일전': graphDTO.threeTotalPrice\n  }, {\n    bottle: `${previousDates[2]}`,\n    '2일전': graphDTO.twoTotalPrice\n  }, {\n    bottle: `${previousDates[1]}`,\n    '1일전': graphDTO.oneTotalPrice\n  }, {\n    bottle: `${previousDates[0]}`,\n    '오늘': graphDTO.currTotalPrice\n  }];\n  return (\n    /*#__PURE__*/\n    // chart height이 100%이기 때문이 chart를 덮는 마크업 요소에 height 설정\n    _jsxDEV(\"section\", {\n      style: {\n        width: '800px',\n        height: '500px',\n        margin: '0 auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(ResponsiveBar\n      /**\n       * chart에 사용될 데이터\n       */, {\n        data: chartData\n        /**\n         * chart에 보여질 데이터 key (측정되는 값)\n         */,\n        keys: ['총합', '4일전', '3일전', '2일전', '1일전', '오늘']\n        /**\n         * keys들을 그룹화하는 index key (분류하는 값)\n         */,\n        indexBy: \"bottle\"\n        /**\n         * chart margin\n         */,\n        margin: {\n          top: 50,\n          right: 130,\n          bottom: 50,\n          left: 100\n        }\n        /**\n         * chart padding (bar간 간격)\n         */,\n        padding: 0.3\n        /**\n         * chart 색상\n         */,\n        colors: ['olive', 'brown', 'orange', 'aqua', 'cadetblue', 'wheat'] // 커스터하여 사용할 때\n        // colors={{ scheme: 'nivo' }} // nivo에서 제공해주는 색상 조합 사용할 때\n        /**\n         * color 적용 방식\n         */,\n        colorBy: \"id\" // 색상을 keys 요소들에 각각 적용\n        // colorBy=\"indexValue\" // indexBy로 묵인 인덱스별로 각각 적용\n        ,\n        theme: {\n          /**\n          * label style (bar에 표현되는 글씨)\n          */\n          labels: {\n            text: {\n              fontSize: 14,\n              fill: '#000000'\n            }\n          },\n          /**\n           * legend style (default로 우측 하단에 있는 색상별 key 표시)\n           */\n          legends: {\n            text: {\n              fontSize: 12,\n              fill: '#000000'\n            }\n          },\n          axis: {\n            /**\n             * axis legend style (bottom, left에 있는 글씨)\n             */\n            legend: {\n              text: {\n                fontSize: 20,\n                fill: '#000000'\n              }\n            },\n            /**\n             * axis ticks style (bottom, left에 있는 값)\n             */\n            ticks: {\n              text: {\n                fontSize: 16,\n                fill: '#000000'\n              }\n            }\n          }\n        }\n        /**\n         * axis bottom 설정\n         */,\n        axisBottom: {\n          tickSize: 5,\n          // 값 설명하기 위해 튀어나오는 점 크기\n          tickPadding: 5,\n          // tick padding\n          tickRotation: 0,\n          // tick 기울기\n          // legend: '종류', // bottom 글씨\n          legendPosition: 'middle',\n          // 글씨 위치\n          legendOffset: 40 // 글씨와 chart간 간격\n        }\n        /**\n         * axis left 설정\n         */,\n        axisLeft: {\n          tickSize: 5,\n          // 값 설명하기 위해 튀어나오는 점 크기\n          tickPadding: 5,\n          // tick padding\n          tickRotation: 0,\n          // tick 기울기\n          legend: '매출액(원)',\n          // left 글씨\n          legendPosition: 'middle',\n          // 글씨 위치\n          legendOffset: -90 // 글씨와 chart간 간격\n        }\n        /**\n         * label 안보이게 할 기준 width\n         */,\n        labelSkipWidth: 36\n        /**\n         * label 안보이게 할 기준 height\n         */,\n        labelSkipHeight: 12\n        /**\n         * bar 클릭 이벤트\n         */,\n        onClick: handle.barClick\n        /**\n         * legend 설정 (default로 우측 하단에 있는 색상별 key 표시)\n         */,\n        legends: [{\n          dataFrom: 'keys',\n          // 보일 데이터 형태\n          anchor: 'bottom-right',\n          // 위치\n          direction: 'column',\n          // item 그려지는 방향\n          justify: false,\n          // 글씨, 색상간 간격 justify 적용 여부\n          translateX: 120,\n          // chart와 X 간격\n          translateY: 0,\n          // chart와 Y 간격\n          itemsSpacing: 2,\n          // item간 간격\n          itemWidth: 100,\n          // item width\n          itemHeight: 20,\n          // item height\n          itemDirection: 'left-to-right',\n          // item 내부에 그려지는 방향\n          itemOpacity: 0.85,\n          // item opacity\n          symbolSize: 20,\n          // symbol (색상 표기) 크기\n          effects: [{\n            // 추가 효과 설정 (hover하면 item opacity 1로 변경)\n            on: 'hover',\n            style: {\n              itemOpacity: 1\n            }\n          }],\n          onClick: handle.legendClick // legend 클릭 이벤트\n        }]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)\n  );\n};\n_c = Barchart;\nexport default Barchart;\nvar _c;\n$RefreshReg$(_c, \"Barchart\");","map":{"version":3,"names":["React","ResponsiveBar","jsxDEV","_jsxDEV","Barchart","_ref","graphDTO","handle","barClick","data","console","log","legendClick","currentDate","Date","previousDates","i","previousDate","setDate","getDate","formattedDate","getMonth","push","currentMonth","toLocaleString","month","chartData","bottle","totalPriceSum","fourTotalPrice","threeTotalPrice","twoTotalPrice","oneTotalPrice","currTotalPrice","style","width","height","margin","children","keys","indexBy","top","right","bottom","left","padding","colors","colorBy","theme","labels","text","fontSize","fill","legends","axis","legend","ticks","axisBottom","tickSize","tickPadding","tickRotation","legendPosition","legendOffset","axisLeft","labelSkipWidth","labelSkipHeight","onClick","dataFrom","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","on","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ethan/Documents/codream_final/camperblic/src/main/frontend/src/pages/admin/components/admindashboard/Barchart.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ResponsiveBar } from '@nivo/bar';\nimport {GraphDTO} from \"../../../../types\";\n\ninterface Props {\n    graphDTO: GraphDTO;\n}\n\nconst Barchart: React.FC<Props> = ({ graphDTO }) => {\n\n    const handle = {\n        barClick: (data: any) => {\n            console.log(data);\n        },\n        legendClick: (data: any) => {\n            console.log(data);\n        },\n    };\n    const currentDate = new Date(); // Get the current date\n    console.log(currentDate);\n    const previousDates = []; // Array to store previous dates\n\n    // 이전 날짜 계산\n    for (let i = 0; i < 5; i++) {\n        const previousDate = new Date(); // 새로운 날짜 객체 생성\n        previousDate.setDate(currentDate.getDate() - i ); // 현재 날짜에서 i일을 뺌\n        const formattedDate = `${previousDate.getMonth() + 1}월${previousDate.getDate()}일`; // 월과 일을 한글로 포맷팅\n        previousDates.push(formattedDate); // 이전 날짜를 배열에 추가\n    }\n\n    const currentMonth = currentDate.toLocaleString('default', { month: 'long' });\n\n    const chartData: {\n        bottle: string;\n        '총합'?: number;\n        '4일전'?: number;\n        '3일전'?: number;\n        '2일전'?: number;\n        '1일전'?: number;\n        '오늘'?: number;\n    }[] = [\n        { bottle: `${currentMonth} 총합`, '총합': graphDTO.totalPriceSum },\n        { bottle: `${previousDates[4]}`, '4일전': graphDTO.fourTotalPrice },\n        { bottle: `${previousDates[3]}`, '3일전': graphDTO.threeTotalPrice },\n        { bottle: `${previousDates[2]}`, '2일전': graphDTO.twoTotalPrice },\n        { bottle: `${previousDates[1]}`, '1일전': graphDTO.oneTotalPrice },\n        { bottle: `${previousDates[0]}`, '오늘': graphDTO.currTotalPrice },\n    ];\n\n    return (\n        // chart height이 100%이기 때문이 chart를 덮는 마크업 요소에 height 설정\n        <section style={{ width: '800px', height: '500px', margin: '0 auto' }}>\n            {/*{graphDTO.map((item) => (*/}\n            <ResponsiveBar\n                /**\n                 * chart에 사용될 데이터\n                 */\n                data ={chartData}\n                /**\n                 * chart에 보여질 데이터 key (측정되는 값)\n                 */\n                keys={['총합', '4일전', '3일전','2일전', '1일전', '오늘']}\n                /**\n                 * keys들을 그룹화하는 index key (분류하는 값)\n                 */\n                indexBy=\"bottle\"\n                /**\n                 * chart margin\n                 */\n                margin={{ top: 50, right: 130, bottom: 50, left: 100 }}\n                /**\n                 * chart padding (bar간 간격)\n                 */\n                padding={0.3}\n                /**\n                 * chart 색상\n                 */\n                colors={['olive', 'brown', 'orange','aqua','cadetblue','wheat']} // 커스터하여 사용할 때\n                // colors={{ scheme: 'nivo' }} // nivo에서 제공해주는 색상 조합 사용할 때\n                /**\n                 * color 적용 방식\n                 */\n                colorBy=\"id\" // 색상을 keys 요소들에 각각 적용\n                // colorBy=\"indexValue\" // indexBy로 묵인 인덱스별로 각각 적용\n                theme={{                    /**\n                     * label style (bar에 표현되는 글씨)\n                     */\n                    labels: {\n                        text: {\n                            fontSize: 14,\n                            fill: '#000000',\n                        },\n                    },\n                    /**\n                     * legend style (default로 우측 하단에 있는 색상별 key 표시)\n                     */\n                    legends: {\n                        text: {\n                            fontSize: 12,\n                            fill: '#000000',\n                        },\n                    },\n                    axis: {\n                        /**\n                         * axis legend style (bottom, left에 있는 글씨)\n                         */\n                        legend: {\n                            text: {\n                                fontSize: 20,\n                                fill: '#000000',\n                            },\n                        },\n                        /**\n                         * axis ticks style (bottom, left에 있는 값)\n                         */\n                        ticks: {\n                            text: {\n                                fontSize: 16,\n                                fill: '#000000',\n                            },\n                        },\n                    },\n                }}\n                /**\n                 * axis bottom 설정\n                 */\n                axisBottom={{\n                    tickSize: 5, // 값 설명하기 위해 튀어나오는 점 크기\n                    tickPadding: 5, // tick padding\n                    tickRotation: 0, // tick 기울기\n                    // legend: '종류', // bottom 글씨\n                    legendPosition: 'middle', // 글씨 위치\n                    legendOffset: 40, // 글씨와 chart간 간격\n                }}\n                /**\n                 * axis left 설정\n                 */\n                axisLeft={{\n                    tickSize: 5, // 값 설명하기 위해 튀어나오는 점 크기\n                    tickPadding: 5, // tick padding\n                    tickRotation: 0, // tick 기울기\n                    legend: '매출액(원)', // left 글씨\n                    legendPosition: 'middle', // 글씨 위치\n                    legendOffset: -90, // 글씨와 chart간 간격\n                }}\n                /**\n                 * label 안보이게 할 기준 width\n                 */\n                labelSkipWidth={36}\n                /**\n                 * label 안보이게 할 기준 height\n                 */\n                labelSkipHeight={12}\n                /**\n                 * bar 클릭 이벤트\n                 */\n                onClick={handle.barClick}\n                /**\n                 * legend 설정 (default로 우측 하단에 있는 색상별 key 표시)\n                 */\n                legends={[\n                    {\n                        dataFrom: 'keys', // 보일 데이터 형태\n                        anchor: 'bottom-right', // 위치\n                        direction: 'column', // item 그려지는 방향\n                        justify: false, // 글씨, 색상간 간격 justify 적용 여부\n                        translateX: 120, // chart와 X 간격\n                        translateY: 0, // chart와 Y 간격\n                        itemsSpacing: 2, // item간 간격\n                        itemWidth: 100, // item width\n                        itemHeight: 20, // item height\n                        itemDirection: 'left-to-right', // item 내부에 그려지는 방향\n                        itemOpacity: 0.85, // item opacity\n                        symbolSize: 20, // symbol (색상 표기) 크기\n                        effects: [\n                            {\n                                // 추가 효과 설정 (hover하면 item opacity 1로 변경)\n                                on: 'hover',\n                                style: {\n                                    itemOpacity: 1,\n                                },\n                            },\n                        ],\n                        onClick: handle.legendClick, // legend 클릭 이벤트\n                    },\n                ]}\n            />\n            {/*))}*/}\n        </section>\n    );\n};\n\nexport default Barchart;"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,aAAa,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAO1C,MAAMC,QAAyB,GAAGC,IAAA,IAAkB;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAD,IAAA;EAE3C,MAAME,MAAM,GAAG;IACXC,QAAQ,EAAGC,IAAS,IAAK;MACrBC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACrB,CAAC;IACDG,WAAW,EAAGH,IAAS,IAAK;MACxBC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACrB;EACJ,CAAC;EACD,MAAMI,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC,CAAC,CAAC;EAChCJ,OAAO,CAACC,GAAG,CAACE,WAAW,CAAC;EACxB,MAAME,aAAa,GAAG,EAAE,CAAC,CAAC;;EAE1B;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IACxB,MAAMC,YAAY,GAAG,IAAIH,IAAI,CAAC,CAAC,CAAC,CAAC;IACjCG,YAAY,CAACC,OAAO,CAACL,WAAW,CAACM,OAAO,CAAC,CAAC,GAAGH,CAAE,CAAC,CAAC,CAAC;IAClD,MAAMI,aAAa,GAAI,GAAEH,YAAY,CAACI,QAAQ,CAAC,CAAC,GAAG,CAAE,IAAGJ,YAAY,CAACE,OAAO,CAAC,CAAE,GAAE,CAAC,CAAC;IACnFJ,aAAa,CAACO,IAAI,CAACF,aAAa,CAAC,CAAC,CAAC;EACvC;;EAEA,MAAMG,YAAY,GAAGV,WAAW,CAACW,cAAc,CAAC,SAAS,EAAE;IAAEC,KAAK,EAAE;EAAO,CAAC,CAAC;EAE7E,MAAMC,SAQH,GAAG,CACF;IAAEC,MAAM,EAAG,GAAEJ,YAAa,KAAI;IAAE,IAAI,EAAEjB,QAAQ,CAACsB;EAAc,CAAC,EAC9D;IAAED,MAAM,EAAG,GAAEZ,aAAa,CAAC,CAAC,CAAE,EAAC;IAAE,KAAK,EAAET,QAAQ,CAACuB;EAAe,CAAC,EACjE;IAAEF,MAAM,EAAG,GAAEZ,aAAa,CAAC,CAAC,CAAE,EAAC;IAAE,KAAK,EAAET,QAAQ,CAACwB;EAAgB,CAAC,EAClE;IAAEH,MAAM,EAAG,GAAEZ,aAAa,CAAC,CAAC,CAAE,EAAC;IAAE,KAAK,EAAET,QAAQ,CAACyB;EAAc,CAAC,EAChE;IAAEJ,MAAM,EAAG,GAAEZ,aAAa,CAAC,CAAC,CAAE,EAAC;IAAE,KAAK,EAAET,QAAQ,CAAC0B;EAAc,CAAC,EAChE;IAAEL,MAAM,EAAG,GAAEZ,aAAa,CAAC,CAAC,CAAE,EAAC;IAAE,IAAI,EAAET,QAAQ,CAAC2B;EAAe,CAAC,CACnE;EAED;IAAA;IACI;IACA9B,OAAA;MAAS+B,KAAK,EAAE;QAAEC,KAAK,EAAE,OAAO;QAAEC,MAAM,EAAE,OAAO;QAAEC,MAAM,EAAE;MAAS,CAAE;MAAAC,QAAA,eAElEnC,OAAA,CAACF;MACG;AAChB;AACA,SAFgB;QAGAQ,IAAI,EAAGiB;QACP;AAChB;AACA,WAFgB;QAGAa,IAAI,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAC,KAAK,EAAE,KAAK,EAAE,IAAI;QAC5C;AAChB;AACA,WAFgB;QAGAC,OAAO,EAAC;QACR;AAChB;AACA,WAFgB;QAGAH,MAAM,EAAE;UAAEI,GAAG,EAAE,EAAE;UAAEC,KAAK,EAAE,GAAG;UAAEC,MAAM,EAAE,EAAE;UAAEC,IAAI,EAAE;QAAI;QACrD;AAChB;AACA,WAFgB;QAGAC,OAAO,EAAE;QACT;AAChB;AACA,WAFgB;QAGAC,MAAM,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAC,MAAM,EAAC,WAAW,EAAC,OAAO,CAAE,CAAC;QACjE;QACA;AAChB;AACA,WAFgB;QAGAC,OAAO,EAAC,IAAI,CAAC;QACb;QAAA;QACAC,KAAK,EAAE;UAAqB;AAC5C;AACA;UACoBC,MAAM,EAAE;YACJC,IAAI,EAAE;cACFC,QAAQ,EAAE,EAAE;cACZC,IAAI,EAAE;YACV;UACJ,CAAC;UACD;AACpB;AACA;UACoBC,OAAO,EAAE;YACLH,IAAI,EAAE;cACFC,QAAQ,EAAE,EAAE;cACZC,IAAI,EAAE;YACV;UACJ,CAAC;UACDE,IAAI,EAAE;YACF;AACxB;AACA;YACwBC,MAAM,EAAE;cACJL,IAAI,EAAE;gBACFC,QAAQ,EAAE,EAAE;gBACZC,IAAI,EAAE;cACV;YACJ,CAAC;YACD;AACxB;AACA;YACwBI,KAAK,EAAE;cACHN,IAAI,EAAE;gBACFC,QAAQ,EAAE,EAAE;gBACZC,IAAI,EAAE;cACV;YACJ;UACJ;QACJ;QACA;AAChB;AACA,WAFgB;QAGAK,UAAU,EAAE;UACRC,QAAQ,EAAE,CAAC;UAAE;UACbC,WAAW,EAAE,CAAC;UAAE;UAChBC,YAAY,EAAE,CAAC;UAAE;UACjB;UACAC,cAAc,EAAE,QAAQ;UAAE;UAC1BC,YAAY,EAAE,EAAE,CAAE;QACtB;QACA;AAChB;AACA,WAFgB;QAGAC,QAAQ,EAAE;UACNL,QAAQ,EAAE,CAAC;UAAE;UACbC,WAAW,EAAE,CAAC;UAAE;UAChBC,YAAY,EAAE,CAAC;UAAE;UACjBL,MAAM,EAAE,QAAQ;UAAE;UAClBM,cAAc,EAAE,QAAQ;UAAE;UAC1BC,YAAY,EAAE,CAAC,EAAE,CAAE;QACvB;QACA;AAChB;AACA,WAFgB;QAGAE,cAAc,EAAE;QAChB;AAChB;AACA,WAFgB;QAGAC,eAAe,EAAE;QACjB;AAChB;AACA,WAFgB;QAGAC,OAAO,EAAE3D,MAAM,CAACC;QAChB;AAChB;AACA,WAFgB;QAGA6C,OAAO,EAAE,CACL;UACIc,QAAQ,EAAE,MAAM;UAAE;UAClBC,MAAM,EAAE,cAAc;UAAE;UACxBC,SAAS,EAAE,QAAQ;UAAE;UACrBC,OAAO,EAAE,KAAK;UAAE;UAChBC,UAAU,EAAE,GAAG;UAAE;UACjBC,UAAU,EAAE,CAAC;UAAE;UACfC,YAAY,EAAE,CAAC;UAAE;UACjBC,SAAS,EAAE,GAAG;UAAE;UAChBC,UAAU,EAAE,EAAE;UAAE;UAChBC,aAAa,EAAE,eAAe;UAAE;UAChCC,WAAW,EAAE,IAAI;UAAE;UACnBC,UAAU,EAAE,EAAE;UAAE;UAChBC,OAAO,EAAE,CACL;YACI;YACAC,EAAE,EAAE,OAAO;YACX9C,KAAK,EAAE;cACH2C,WAAW,EAAE;YACjB;UACJ,CAAC,CACJ;UACDX,OAAO,EAAE3D,MAAM,CAACK,WAAW,CAAE;QACjC,CAAC;MACH;QAAAqE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEG;EAAC;AAElB,CAAC;AAACC,EAAA,GAtLIjF,QAAyB;AAwL/B,eAAeA,QAAQ;AAAC,IAAAiF,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}